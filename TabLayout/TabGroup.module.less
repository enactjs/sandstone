// TabGroup.module.less
//
@import "../styles/mixins.less";
@import "../styles/skin.less";
@import "../styles/variables.less";

.tab {
	display: block; // Allow the button to fill the horizontal space and collapse as the parent Cell gets smaller.
	font-weight: normal;

	&.horizontal {
		&.button {
			margin: @sand-tablayout-tab-horizontal-margin;
			padding: @sand-tablayout-tab-horizontal-padding;
			height: @sand-tablayout-tab-horizontal-button-height;

			.client {
				.sand-spotlight-margin();
			}

			&.selected {
				.client::after {
					content: "";
					position: absolute;
					.position(auto, 0, 0, 0);
					height: @sand-tablayout-tab-horizontal-selected-border-width;
				}
			}
		}
	}

	&.vertical {
		margin-bottom: @sand-tablayout-tab-vertical-margin-bottom;

		&.button {
			height: @sand-tablayout-tab-vertical-button-height;
		}

		.client {
			text-align: start;
		}
	}

	.applySkins({
		&.horizontal {
			&.button {
				&.selected {
					.bg {
						opacity: 0;
					}
				}

				.client::after {
					background-color: @sand-tablayout-tab-horizontal-selected-border-color;
				}

				.focus({
					.bg {
						opacity: 1;
					}

					.client::after {
						background-color: unset;
					}
				});
			}
		}
	});
}

.tabGroup {
	// .tabs {
		// === Important Note ===
		//
		// onTabAnimationEnd unit test relies on the opacity property transition to operate
		// correctly. If this transition changes to a different property you'll see unit test
		// failures. To fix them, update the unit tests to match the transitioning property.
		transition: opacity @sand-tablayout-collapse-duration ease-out;
		will-change: opacity;
		opacity: 1;
	// }

	&.tabsExpanded {
		position: absolute;
		top: 0;
		// width: var(--cell-size); // References the cell-size, since flex-basis doesn't force-assign a width, and cell-size normally just applies to max-width
		width: var(--tablayout-tabs-normal);
		transition: opacity @sand-tablayout-collapse-duration ease-out, transform @sand-tablayout-collapse-duration ease-in-out;
		will-change: opacity, transform;
		transform: translateX(0); // set an initial value to ensure a smooth transition
	}

	&:not(.collapsed) {
		// .tabs {
			opacity: 0;
		// }

		&.tabsExpanded {
			opacity: 1;
		}
	}

	&.collapsed {
		&.tabsExpanded {
			opacity: 0;
			transform: translateX(calc(var(--tablayout-expand-collapse-diff) * -1));
			pointer-events: none;
		}
	}

	.applySkins({
		.horizontalLine {
			width: 100%;
			margin: 0;
			border: 0 none transparent;
			border-bottom: @sand-tablayout-tab-horizontal-border-width solid @sand-tablayout-tab-horizontal-border-color;
		}
	});
}
