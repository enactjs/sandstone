// TabLayout.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";

.tabLayout {
	height: 100%;

	&.collapsed {
		/* We need a placeholder for spotlight default focus rules */
	}

	&.horizontal {
		.tabs {
			margin: @sand-tablayout-horizontal-tabs-margin;
		}

		.content {
			margin-top: @sand-tablayout-horizontal-content-margin-top;
		}
	}

	&.vertical {
		.tabs {
			// === Important Note ===
			//
			// onTabAnimationEnd unit test relies on the opacity property transition to operate
			// correctly. If this transition changes to a different property you'll see unit test
			// failures. To fix them, update the unit tests to match the transitioning property.
			transition: opacity @sand-tablayout-collapse-duration ease-out;
			will-change: opacity;
			opacity: 1;
		}

		.tabsExpanded {
			position: absolute;
			width: var(--cell-size); // References the cell-size, since flex-basis doesn't force-assign a width, and cell-size normally just applies to max-width
			transition: opacity @sand-tablayout-collapse-duration ease-out, transform @sand-tablayout-collapse-duration ease-in-out;
			will-change: opacity, transform;
			transform: translateX(0); // set an initial value to ensure a smooth transition
		}

		.content {
			margin-top: @sand-tablayout-vertical-content-margin-top;
			transition: transform @sand-tablayout-collapse-duration ease-in-out;
			will-change: transform;
			transform: translateX(0); // set an initial value to ensure a smooth transition
		}

		&:not(.collapsed) {
			.tabs {
				opacity: 0;
			}

			.tabsExpanded {
				opacity: 1;
			}

			.content {
				transform: translateX(var(--tablayout-expand-collapse-diff));

				.enact-locale-rtl({
					transform: translateX(calc(var(--tablayout-expand-collapse-diff) * -1));
				});
			}
		}

		&.collapsed {
			.tabsExpanded {
				opacity: 0;
				transform: translateX(calc(var(--tablayout-expand-collapse-diff) * -1));
				pointer-events: none;

				.enact-locale-rtl({
					transform: translateX(var(--tablayout-expand-collapse-diff));
				});
			}
		}
	}
}
