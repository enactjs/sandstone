// Tooltip.module.less
//
@import "../styles/variables.less";
@import "../styles/mixins.less";
@import "../styles/skin.less";

.tail (@origin, @rotate, @skewX, @skewY) {
	left: 0;
	transform-origin: @origin;
	transform: rotate(@rotate) skew(@skewX, @skewY);
}

.centerTail (@origin, @rotate, @skew) {
	transform-origin: @origin;
	transform: rotate(@rotate) skew(@skew, @skew);
}

.tooltip {
	position: absolute;
	z-index: 1;
	pointer-events: none;

	// You'll notice tiny adjustments to the position: 0.99px, 1px, 8px, etc. in the following code.
	// These are to account for sub-pixel rendering on scaled or "imperfect" rendering scenarios
	// where hairline gaps can be seen between the tail and the body.

	.tooltipArrow {
		position: absolute;
		width: @sand-tooltip-point-width;
		height: @sand-tooltip-point-height;
		z-index: 1;

		&::after {
			content: "";
			position: absolute;
			width: 100%;
			height: 100%;
		}
	}
	&.rightArrow,
	&.leftArrow {
		.tooltipArrow {
			width: @sand-tooltip-point-height;
			height: @sand-tooltip-point-width;
		}
	}
	&.centerArrow .tooltipArrow {
		width: @sand-tooltip-point-height;
		height: @sand-tooltip-point-width;
		left: 50%;
	}
	&.middleArrow .tooltipArrow {
		width: @sand-tooltip-point-width;
		height: @sand-tooltip-point-height;
		top: 50%;
	}

	.tooltipLabel {
		--sand-tooltip-label-width: auto;

		.sand-small-button-text();
		font-size: @sand-tooltip-label-font-size;
		font-weight: @sand-tooltip-font-weight;
		line-height: @sand-tooltip-label-height;
		white-space: nowrap;
		width: var(--sand-tooltip-label-width); // assign a width if necessary, but without a width, "auto" is just fine.
		padding: @sand-tooltip-padding;
		border-radius: @sand-tooltip-border-radius;

		.enact-locale-rtl({
			text-align: right;
		});

		&.marquee {
			max-width: var(--sand-tooltip-label-width, @sand-tooltip-marquee-width); // If using a marquee, use the preferred width, and if none is provided, fall back to our default variable.
		}

		&.multi {
			white-space: normal;
			.locale-japanese-line-break();
		}
	}

	&.balloon { /* Needed to prevent global class being added in the DOM */ }

	&.transparent {
		.tooltipLabel {
			font-weight: @sand-tooltip-transparent-font-weight;
			font-size: 36px;
		}
		.tooltipArrow {
			display: none;
		}
		&.below {
			.tooltipLabel {
				margin-top: @sand-tooltip-transparent-label-offset;
			}
		}
		&.above {
			.tooltipLabel {
				margin-bottom: @sand-tooltip-transparent-label-offset;
			}
		}
		&.left {
			.tooltipLabel {
				margin-right: @sand-tooltip-transparent-label-offset;
			}
		}
		&.right {
			.tooltipLabel {
				margin-left: @sand-tooltip-transparent-label-offset;
			}
		}
	}

	// Positioning for the arrow and label
	&.below {
		.tooltipArrow {
			top: @sand-tooltip-arrow-offset;
		}

		.tooltipLabel {
			margin-top: @sand-tooltip-margin-offset;
		}

		&.leftArrow {
			.tooltipArrow {
				right: 0;
				overflow: hidden;

				&::after {
					.tail(top right; -45deg; -45deg; -5deg);
				}
			}

			.tooltipLabel {
				text-align: right;
				border-top-right-radius: 0;
			}
		}

		&.centerArrow {
			.tooltipArrow {
				left: 50%;

				&::after {
					top: @sand-tooltip-arrow-offset;
					.centerTail(top left; 45deg; 5deg);
				}
			}
		}

		&.rightArrow {
			.tooltipArrow {
				left: 0;
				overflow: hidden;

				&::after {
					.tail(top left; 45deg; 45deg; 5deg);
				}
			}

			.tooltipLabel {
				border-top-left-radius: 0;
			}
		}
	}

	&.above {
		.tooltipArrow {
			bottom: @sand-tooltip-arrow-offset;
		}

		.tooltipLabel {
			margin-bottom: @sand-tooltip-margin-offset;
		}

		&.leftArrow {
			.tooltipArrow {
				right: 0;
				overflow: hidden;

				&::after {
					.tail(bottom right; 45deg; 45deg; 5deg);
				}
			}

			.tooltipLabel {
				text-align: right;
				border-bottom-right-radius: 0;
			}
		}

		&.centerArrow {
			.tooltipArrow::after {
				bottom: @sand-tooltip-arrow-offset;
				.centerTail(bottom left; -45deg; -5deg);
			}
		}

		&.rightArrow {
			.tooltipArrow {
				left: 0;
				overflow: hidden;

				&::after {
					.tail(bottom left; -45deg; -45deg; -5deg);
				}
			}

			.tooltipLabel {
				border-bottom-left-radius: 0;
			}
		}
	}

	&.left {
		.tooltipArrow {
			right: @sand-tooltip-arrow-offset;
		}

		.tooltipLabel {
			margin-right: ~"calc(" @sand-tooltip-margin-offset ~"- 1px)";
		}

		&.topArrow {
			.tooltipArrow {
				bottom: 0;
				overflow: hidden;

				&::after {
					.tail(bottom right; -45deg; 5deg; 45deg);
				}
			}

			.tooltipLabel {
				border-bottom-right-radius: 0;
			}
		}

		&.middleArrow {
			.tooltipArrow::after {
				right: @sand-tooltip-arrow-offset;
				.centerTail(top right; 45deg; -5deg);
			}
		}

		&.bottomArrow {
			.tooltipArrow {
				overflow: hidden;

				&::after {
					.tail(top right; 45deg; 5deg; -45deg);
				}
			}

			.tooltipLabel {
				border-top-right-radius: 0;
			}
		}
	}

	&.right {
		.tooltipArrow {
			left: @sand-tooltip-arrow-offset;
		}

		.tooltipLabel {
			margin-left: @sand-tooltip-margin-offset;
		}

		&.topArrow {
			.tooltipArrow {
				bottom: 0;
				overflow: hidden;

				&::after {
					.tail(bottom left; 45deg; -5deg; -45deg);
				}
			}

			.tooltipLabel {
				border-bottom-left-radius: 0;
			}
		}

		&.middleArrow {
			.tooltipArrow::after {
				left: @sand-tooltip-arrow-offset;
				.centerTail(top left; -45deg; 5deg);
			}
		}

		&.bottomArrow {
			.tooltipArrow {
				overflow: hidden;

				&::after {
					.tail(top left; -45deg; 5deg; 45deg);
				}
			}
			.tooltipLabel {
				border-top-left-radius: 0;
			}
		}
	}

	// Absolute positioning mode - anchor position rules
	&.absolute {
		width: 0;
		height: 0;
		top: var(--tooltip-position-top);
		left: var(--tooltip-position-left);

		.tooltipAnchor {
			position: absolute;
		}

		&.below {
			top: ~"calc(var(--tooltip-position-top) + " @sand-tooltip-offset ~")";

			&.transparent {
				top: ~"calc(var(--tooltip-position-top) + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.leftArrow .tooltipAnchor {	transform: translateX(-100%);	}
			&.centerArrow .tooltipAnchor {	transform: translateX(-50%);	}
			&.rightArrow .tooltipAnchor {	/* transform: translate(0, 0); */	}
		}

		&.above {
			top: ~"calc(var(--tooltip-position-top) - " @sand-tooltip-offset ~")";

			&.transparent {
				top: ~"calc(var(--tooltip-position-top) - " @sand-tooltip-transparent-label-offset ~")";
			}

			&.leftArrow .tooltipAnchor {	transform: translate(-100%, -100%);	}
			&.centerArrow .tooltipAnchor {	transform: translate(-50%, -100%);	}
			&.rightArrow .tooltipAnchor {	transform: translate(0, -100%);	}
		}

		&.left {
			left: ~"calc(var(--tooltip-position-left) - " @sand-tooltip-offset ~")";

			&.transparent {
				left: ~"calc(var(--tooltip-position-left) - " @sand-tooltip-transparent-label-offset ~")";
			}

			&.topArrow .tooltipAnchor {	transform: translate(-100%, -100%);	}
			&.middleArrow .tooltipAnchor {	transform: translate(-100%, -50%);	}
			&.bottomArrow .tooltipAnchor {	transform: translate(-100%, 0);	}
		}

		&.right {
			left: ~"calc(var(--tooltip-position-left) + " @sand-tooltip-offset ~")";

			&.transparent {
				left: ~"calc(var(--tooltip-position-left) + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.topArrow .tooltipAnchor {	transform: translate(0, -100%);	}
			&.middleArrow .tooltipAnchor {	transform: translate(0, -50%);	}
			&.bottomArrow .tooltipAnchor {	/* transform: translate(0, 0); */	}
		}
	}

	// Relative positioning mode - position rules
	&.relative {
		&.below {
			top: ~"calc(100% + " @sand-tooltip-offset ~")";

			&.transparent {
				top: ~"calc(100% + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.leftArrow {	right: 50%;	}
			&.centerArrow,
			&.rightArrow {	left: 50%;	}

			&.centerArrow {	transform: translateX(-50%);	}
		}

		&.above {
			bottom: ~"calc(100% + " @sand-tooltip-offset ~")";

			&.transparent {
				bottom: ~"calc(100% + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.leftArrow {	right: 50%;	}
			&.centerArrow,
			&.rightArrow {	left: 50%;	}

			&.centerArrow {	transform: translateX(-50%);	}
		}

		&.left {
			right: ~"calc(100% + " @sand-tooltip-offset ~")";

			&.transparent {
				right: ~"calc(100% + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.topArrow {	bottom: 50%;	}
			&.middleArrow,
			&.bottomArrow {	top: 50%;	}

			&.middleArrow {	transform: translateY(-50%);	}
		}

		&.right {
			left: ~"calc(100% + " @sand-tooltip-offset ~")";

			&.transparent {
				left: ~"calc(100% + " @sand-tooltip-transparent-label-offset ~")";
			}

			&.topArrow {	bottom: 50%;	}
			&.middleArrow,
			&.bottomArrow {	top: 50%;	}

			&.middleArrow {	transform: translateY(-50%);	}
		}
	}

	.enact-locale-rtl({
		direction: ltr;

		.tooltipAnchor {
			direction: rtl;
		}
	});

	// Skin colors
	.applySkins({
		box-shadow: @sand-tooltip-shadow;

		&.transparent {
			filter: none;
			.tooltipLabel {
				color: #fff;
				background-color: transparent;
			}
		}

		.tooltipArrow::after {
			background: @sand-tooltip-bg-color;
		}

		.tooltipLabel {
			color: @sand-tooltip-text-color;
			background-color: @sand-tooltip-bg-color;
		}
	});
}
