// color-mixins.scss
//
// Mixins specifically dependent on theme colors.
// Shortcuts for easily getting consistent colorization rules onto components.
//

@use "./colors";
@use "./variables";
@import "./mixins";

// ---------------------------------------
// Focus Shadow and background setup
// ---------------------------------------
@mixin sand-bg-colors() {
	@content;
}

// Assign the standard disabled rules of backgrounds to bg nodes.
// This should be used on children of a root component node.
@mixin sand-disabled-focus-bg-colors {
	opacity: colors.$sand-disabled-focus-bg-opacity;

	@include sand-bg-colors{
		@content;
	}
}

// Assign the standard disabled rules of backgrounds to bg nodes.
// This should be used on children of a root component node.
@mixin sand-disabled-focus-bg-colors {
	opacity: colors.$sand-disabled-focus-bg-opacity;

	@include sand-bg-colors{
		@content;
	}
}

@mixin sand-spotlight-resting-bg-colors($opacity: 0) {
	opacity: $opacity;

	@include sand-bg-colors {
		background-color: colors.$sand-spotlight-bg-color;
		will-change: box-shadow;

		@content;
	};
}

@mixin sand-spotlight-focus-bg-colors() {
	opacity: 1;

	@include sand-bg-colors {
		background-color: colors.$sand-spotlight-bg-color;
		box-shadow: colors.$sand-spotlight-focus-shadow;

		@content;
	};
}

@mixin sand-spotlight-focus-text-colors {
	// font-weight: @sand-spotlight-font-weight;
	color: colors.$sand-spotlight-text-color;
}

//
// The following 3 mixins should be used inside the `@mixin sand-disabled` mixin's ruleset.
//

// Assign the standard disabled rules
@mixin sand-disabled-colors {
	opacity: colors.$sand-disabled-opacity;
}

@mixin sand-disabled-bg-colors {
	opacity: colors.$sand-disabled-bg-opacity;
}

// Assign the standard disabled rules of content to content nodes.
// This should be used on children of a root component node.
@mixin sand-disabled-focus-content-colors {
	opacity: colors.$sand-disabled-focus-content-opacity;
}

// The technique below is special handling for opaque buttons, which have an opaque
// color defined for the initial background-color. This means we can't use the
// traditional opacity change to animate the difference. Instead, this smoothly applies
// (via transition) a series of filters that match the spotlight-focus bg color. The
// values were manually calculated to perfectly match, taking the resting bg-color and
// adjusting it to become the focus-bg-color. If either color value changes, these
// adjustments must be recalculated. This is not automatic. It may be possible to
// autonomously calculate this in the future...
// Button single-color mixins
@mixin sand-button-resting-bg-color {
	background-color: colors.$sand-button-bg-color;
}

@mixin sand-button-selected-bg-color {
	background-color: colors.$sand-button-selected-bg-color;
	filter: colors.$sand-button-selected-filter;
}

@mixin sand-button-focus-bg-color {
	background-color: colors.$sand-button-focus-bg-color;
	filter: colors.$sand-button-focus-filter;
}

// Button state mixins
@mixin sand-button-resting-bg-colors () {
	@include sand-spotlight-resting-bg-colors($opacity: 0) {
		@include sand-button-resting-bg-color;
		will-change: transform, filter;
		transition: transform variables.$sand-button-focus-duration ease-out;

		@content;
	}
}

@mixin sand-button-selected-colors {
	@include sand-bg-colors {
		@include sand-button-selected-bg-color;
	}
}

@mixin sand-button-focus-bg-colors {
	@include sand-spotlight-focus-bg-colors {
		@include sand-button-focus-bg-color;
	}
}
