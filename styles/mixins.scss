@use "../styles/variables";
//@use "../../enact/packages/ui/styles/mixins" as uiMixins;
@import "../../enact/packages/spotlight/styles/mixins";
@import "../../enact/packages/ui/styles/mixins";

@function default($args...) {
  @each $arg in $args {
    @if not variable-exists(#{$arg}) {
      @return true;
    }
  }
  @return false;
}

// Allows a component to override the existing "disabled" rules and apply its own customized rules.
@mixin sand-disabled {
  @if content-exists() {
    @include disabled {
      opacity: 1; // reset standard disabled rule.
      @content;
    }
  }
}

// /**
//  * Add a padding to your component which includes the standard sandstone spotlight padding on the
//  * sides and uses the two arguments for padding on the top and bottom respectively.
//  *
//  * @param  {Measurement} @t Top padding
//  * @param  {Measurement} @b Bottom padding
//  */
@mixin sand-spotlight-padding($values...) {
  @if (length($values) == 0) {
    padding-left: variables.$sand-spotlight-outset;
    padding-right: variables.$sand-spotlight-outset;
  } @else if (length($values) == 1) {
    padding: nth($values, 1) variables.$sand-spotlight-outset;
  } @else if (length($values) == 2) {
    padding: nth($values, 1) variables.$sand-spotlight-outset nth($values, 2);
  }
}

//
// Sandstone Font Applicator
//
// When only rules are provided. Default populate the $target argument.
//@mixin sand-font($target: normal) {
//  @if content-exists() {
//    // content: "Applying .sand-font (rules)";
//    @include sand-font(variables.$sand-font-family, variables.$sand-non-latin-font-family, $target) {
//      @content;
//    };
//  }
//}
// When 0, 1, or 2 strings (font family names) are provided. Default populate the $target argument so the signature stays the same.
//@mixin sand-font($family: variables.$sand-font-family, $nlfamily: variables.$sand-non-latin-font-family, $target: normal) {
  //@if type-of($family) == string and type-of($nlfamily) == string {
  //  // content: "Applying .sand-font 0123";
  //  @include sand-font($family, $nlfamily, $target) {};
  //}
//}
// When exactly 3 or 4 args are provided. Types are assumed because they went through the trouble to provide all 3 required args.
//@mixin sand-font($family, $nlfamily, $target: normal) {
//  @if content-exists() {
//    // content: "Applying .sand-font 34";
//    font-family: $family;
//
//    @include enact-locale(non-latin, $target) {
//      font-family: $nlfamily;
//      @content;
//    }
//  }
//}

@mixin sand-font(
  $family: variables.$sand-font-family,
  $nlfamily: variables.$sand-non-latin-font-family,
  $target: normal
) {
  @if content-exists() {
    font-family: $family;

    @include enact-locale(non-latin, $target) {
      font-family: $nlfamily;

      @content;
    }
  }
}

@mixin sand-custom-text-large {
  // 1 arg: Generic rule applicator, accepts an entire rule-set to add for large text mode
  &:global(.largeText) {
    @content;
  }
}

@mixin sand-custom-text-large-locale {
  // 2 args: Generic rule applicator, accepts 2 entire rule-sets to add both latin and non-latin for large text mode
  @include enact-locale(non-latin) {
    @include sand-custom-text-large {
      @content;
    }
  }
}

// Add an extension to the .enact-locale-line-height mixin defined in ~@ui which has defaults specific to sandstone.
//
// Set line-height for normal and tallglyphs with 0, 1 or 2 arguments
// Ex:
//   .enact-locale-line-height();              ->  normal: default; tallglyphs: default;
//   .enact-locale-line-height(1.4em);         ->  normal: 1.4em; tallglyphs: default;
//   .enact-locale-line-height(1.4em; 1.6em);  ->  normal: 1.4em; tallglyphs: 1.6em;
//@mixin enact-locale-line-height($normal: variables.$sand-common-line-height, $tallglyph: variables.$sand-tallglyph-line-height, $target: normal) {
//  @if (default($target)) {
//    @include uiMixins.enact-locale-tallglyph(line-height, $normal, $tallglyph, $target);
//  }
//}
