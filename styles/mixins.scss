@use "../styles/variables";
@use "../styles/variables-base";
@import "@enact/spotlight/styles/mixins";
@import "@enact/ui/styles/mixins";

// Allows a component to override the existing "disabled" rules and apply its own customized rules.
@mixin sand-disabled {
	@if content-exists() {
		@include disabled {
			opacity: 1; // reset standard disabled rule.
			@content;
		}
	}
}

@mixin sand-taparea($element-size) {
	@if (variables.$sand-smallest-tappable-size > $element-size) {
		// Take the size of the minimum tappable area, and subtract the element's current size.
		$_tap-offset: -(calc((variables.$sand-smallest-tappable-size - $element-size) / 2));

		&::before {
			content: "";
			position: absolute;
			top: $_tap-offset;
			right: $_tap-offset;
			bottom: $_tap-offset;
			left: $_tap-offset;
			border-radius: variables-base.$sand-button-border-radius;
		}
	} @else if (variables.$sand-smallest-tappable-size <= $element-size) {
		// Remove the tappable area if the tap area is smaller than the element's current size.
		&::before {
			content: none;
		}
	}
}

@mixin sand-item-icon-tap-area-adjust {
	&.small > .small-icon-tap-area {
		left: -(variables.$sand-spotlight-outset);
		right: -(variables.$sand-spotlight-outset);
	}
}

@mixin sand-word-break {
	& {
		overflow-wrap: break-word;
		word-break: keep-all;
	}
}

@mixin sand-spotlight-margin($values...) {
	@if (length($values) == 0) {
		/**
		  * Add a margin to your component which includes the standard sandstone spotlight margin only on
		  * the sides.
		  */
		margin-left: variables.$sand-spotlight-outset;
		margin-right: variables.$sand-spotlight-outset;
	} @else if (length($values) == 1) {
		/**
		  * Add a margin to your component which includes the standard sandstone spotlight margin on the
		  * sides and uses the argument for margin on the top and bottom.
		  */
		margin: nth($values, 1) variables.$sand-spotlight-outset;
	} @else if (length($values) == 2) {
		/**
		  * Add a margin to your component which includes the standard sandstone spotlight margin on the
		  * sides and uses the two arguments for margin on the top and bottom respectively.
		  */
		margin: nth($values, 1) variables.$sand-spotlight-outset nth($values, 2);
	}
}

@mixin sand-spotlight-padding($values...) {
	@if (length($values) == 0) {
		/*
		* Add a padding to your component which includes the standard sandstone spotlight padding only on
		* the sides.
		*/
		& {
			padding-left: variables.$sand-spotlight-outset;
			padding-right: variables.$sand-spotlight-outset;
		}
	} @else if (length($values) == 1) {
		/*
		* Add a padding to your component which includes the standard sandstone spotlight padding on the
		* sides and uses the argument for padding on the top and bottom.
		*/
		& {
			padding: nth($values, 1) variables.$sand-spotlight-outset;
		}
	} @else if (length($values) == 2) {
		/*
		* Add a padding to your component which includes the standard sandstone spotlight padding on the
		* sides and uses the two arguments for padding on the top and bottom respectively.
		*/
		& {
			padding: nth($values, 1) variables.$sand-spotlight-outset nth($values, 2);
		}
	}
}

//
// Mixin classes for creating the sandstone text classes
//

// Text base provides family, weight, and size
// Accepts 0, 1 or 2 arguments
// The first argument allows overriding the font size, defaulting to
// the default body font size, the 2nd argument is used privately by
// ThemeDecorator to override the target of the rules.
@mixin sand-text-base($font-size: variables.$sand-body-font-size, $target: normal) {
	@include sand-font($target: $target) {
		font-weight: variables.$sand-non-latin-font-weight;
	}

	& {
		font-weight: normal;
		font-size: $font-size;
	}

	@include sand-enact-locale-line-height(variables.$sand-body-line-height, variables.$sand-tallglyph-body-line-height, $target);
}

//
// Sandstone Font Applicator
//
@mixin sand-font(
	$family: variables.$sand-font-family,
	$non-latin-family: variables.$sand-non-latin-font-family,
	$target: normal
) {
	@if content-exists() {
		& {
			font-family: $family;
		}

		@include enact-locale(non-latin, $target) {
			font-family: $non-latin-family;

			@content;
		}
	}
}

// Convenience method added to simply set the font size. Please don't use this inside the framework
// as it will generate a significant amount of selectors and rules that might not be minified.
// The framework offers more direct and more efficient means of assigning multiple rules at once.
// This is primarily a convenience for external app developers.
// Usage:
//    0 args -> default size for latin is applied to both latin and non-latin
//    1 arg  -> that size is applied to both latin and non-latin
//    2 args -> first is applied to latin, second to non-latin
@mixin sand-font-size($font-size: variables.$sand-body-font-size, $non-latin-font-size: $font-size) {
	font-size: $font-size;

	@include enact-locale(non-latin) {
		font-size: $non-latin-font-size;
	}
}

// Generic Non-Latin Font Rule generator
@mixin sand-locale-non-latin($target) {
	@include enact-locale(non-latin, $target) {
		@content;
	}
}

//
// Custom Text Size Mixins
//
@mixin sand-custom-text-size($values...) {
	@if (length($values) == 1) {
		@include sand-custom-text-large {
			font-size: $values;
		}
	} @else if (length($values) == 2) {
		@include sand-custom-text-large {
			font-size: nth($values, 1);
		}

		@include sand-custom-text-locale {
			font-size: nth($values, 2);
		}
	}
}

@mixin sand-custom-text-large {
	// Generic rule applicator for large text mode
	&:global(.largeText) {
		@content;
	}
}

@mixin sand-custom-text-locale {
	// Generic rule applicator for latin and non-latin large text mode
	@include enact-locale(non-latin) {
		@include sand-custom-text-large {
			@content;
		}
	}
}

@mixin sand-font-number {
	// content: "Applying .sand-font-number";
	@include sand-font(variables.$sand-number-font-family, variables.$sand-number-font-family) {};
}

//
// Text definitions
//

@mixin sand-alert-title {
	@include sand-font(variables.$sand-alert-font-family, variables.$sand-non-latin-font-family-light);
	@include sand-enact-locale-line-height(variables.$sand-alert-line-height, variables.$sand-tallglyph-body-line-height);

	& {
		font-size: variables.$sand-alert-title-font-size;
		font-weight: variables.$sand-alert-font-weight;
	}
}

@mixin sand-alert-subtitle {
	@include sand-font(variables.$sand-alert-font-family, variables.$sand-non-latin-font-family-light);
	@include sand-enact-locale-line-height(variables.$sand-alert-line-height);

	& {
		font-size: variables.$sand-alert-subtitle-font-size;
		font-weight: variables.$sand-alert-font-weight;
	}
}

@mixin sand-alert-overlay-content {
	font-weight: variables.$sand-alert-font-weight;
	font-size: variables.$sand-alert-overlay-font-size;
	text-align: initial;

	@include sand-enact-locale-line-height(variables.$sand-alert-line-height, variables.$sand-tallglyph-body-line-height);
	@include sand-font(variables.$sand-alert-font-family, variables.$sand-non-latin-font-family-light);

	@include sand-word-break;
	@include locale-japanese-line-break;
}

@mixin sand-body-text {
	font-weight: variables.$sand-body-font-weight;
	font-size: variables.$sand-body-font-size;
	font-style: variables.$sand-body-font-style;

	@include sand-font(variables.$sand-body-font-family, variables.$sand-non-latin-font-family-light) {
		font-weight: variables.$sand-non-latin-body-font-weight;
		font-size: variables.$sand-non-latin-body-font-size;
		font-style: variables.$sand-non-latin-body-font-style;
	};

	@include sand-enact-locale-line-height(variables.$sand-body-line-height, variables.$sand-tallglyph-body-line-height);

	a:link {color: inherit; text-decoration:none;}
	a:visited {color: inherit; text-decoration:none;}
	a:hover {color: inherit; text-decoration:none;}
	a:active {color: inherit; text-decoration:none;}
}

@mixin sand-large-button-text {
	@include sand-font(variables.$sand-button-font-family, variables.$sand-non-latin-button-font-family) {
		font-size: variables.$sand-non-latin-button-large-font-size;
		font-style: variables.$sand-non-latin-button-font-style;
		font-weight: variables.$sand-non-latin-button-font-weight;
	}

	& {
		font-size: variables.$sand-button-font-size;
		font-style: variables.$sand-button-font-style;
		font-weight: variables.$sand-button-font-weight;
	}

	@include font-kerning;
}

@mixin sand-small-button-text {
	@include sand-font(variables.$sand-button-small-font-family, variables.$sand-non-latin-button-font-family) {
		font-size: variables.$sand-non-latin-button-small-font-size;
		font-style: variables.$sand-non-latin-button-small-font-style;
		font-weight: variables.$sand-non-latin-button-small-font-weight;
	}

	& {
		font-size: variables.$sand-button-small-font-size;
		font-style: variables.$sand-button-small-font-style;
		font-weight: variables.$sand-button-small-font-weight;
	}

	@include font-kerning;
}

// Uses Webkit specific styles to have multi-line ellipsis
@mixin sand-multi-line-ellipsis($lines) {
	overflow: hidden;
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
}

// Add an extension to the `enact-locale-line-height` mixin defined in ~@ui which has defaults specific to sandstone.
//
// Set line-height for normal and tallglyphs with 0, 1 or 2 arguments
// Ex:
//   @include enact-locale-line-height();              ->  normal: default; tallglyphs: default;
//   @include enact-locale-line-height(1.4em);         ->  normal: 1.4em; tallglyphs: default;
//   @include enact-locale-line-height(1.4em; 1.6em);  ->  normal: 1.4em; tallglyphs: 1.6em;
@mixin sand-enact-locale-line-height($values...) {
	@if (length($values) == 0) {
		@include enact-locale-tallglyph(line-height, variables.$sand-common-line-height, variables.$sand-tallglyph-line-height, normal, variables.$locale-tallglyph-languages);
	} @else if(length($values) == 1) {
		@include enact-locale-tallglyph(line-height, $values, variables.$sand-tallglyph-line-height, normal, variables.$locale-tallglyph-languages);
	} @else if(length($values) == 2) {
		@include enact-locale-tallglyph(line-height, nth($values, 1), nth($values, 2), normal, variables.$locale-tallglyph-languages);
	} @else if(length($values) == 3) {
		@include enact-locale-tallglyph(line-height, nth($values, 1), nth($values, 2), nth($values, 3), variables.$locale-tallglyph-languages);
	}
}

@mixin sand-enact-locale-tallglyph($rule, $value, $target: normal) {
	@include enact-locale-tallglyph-values($rule, $value, $target, variables.$locale-tallglyph-languages);
}

@mixin sand-focus-ring {
	transform: none;
	outline: 12px solid rgb(230, 230, 230);
	outline-offset: 9px;
}

@mixin sand-focus-highlight($target: '') {
	@if $target == '' {
		@include focus {
			&:global(.focusRing) {
				@include sand-focus-ring;
			}
		}
	} @else {
		@include focus {
			&:global(.focusRing) {
				transform: none;

				.#{$target} {
					@include sand-focus-ring;
				}
			}
		}
	}
}
