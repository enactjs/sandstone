@use "../styles/variables";
@use "../../enact/packages/ui/styles/mixins" as uiMixins;
@import "../../enact/packages/spotlight/styles/mixins";
@import "../../enact/packages/ui/styles/mixins";

@function default($args...) {
    @each $arg in $args {
        @if not variable-exists(#{$arg}) {
            @return true;
        }
    }
    @return false;
}

// Allows a component to override the existing "disabled" rules and apply its own customized rules.
@mixin sand-disabled {
    @if content-exists() {
        @include uiMixins.disabled {
            opacity: 1; // reset standard disabled rule.
            @content;
        }
    }
}

// Add a padding to your component.
@mixin sand-spotlight-padding($values...) {
    @if (length($values) == 0) {
        padding-left: variables.$sand-spotlight-outset;
        padding-right: variables.$sand-spotlight-outset;
    } @else if (length($values) == 1) {
        padding: nth($values, 1) variables.$sand-spotlight-outset;
    } @else if (length($values) == 2) {
        padding: nth($values, 1) variables.$sand-spotlight-outset nth($values, 2);
    }
}

@mixin position($value) {
    left: $value;
    right: $value;
    top: $value;
    bottom: $value;
}

//
// Sandstone Font Applicator
//
@mixin sand-font(
    $family: variables.$sand-font-family,
	$nlfamily: variables.$sand-non-latin-font-family,
	$target: normal
) {
    @if content-exists() {
        font-family: $family;

        @include enact-locale(non-latin, $target) {
            font-family: $nlfamily;

            @content;
        }
    }
}

@mixin sand-custom-text-large {
    // 1 arg: Generic rule applicator, accepts an entire rule-set to add for large text mode
    &:global(.largeText) {
        @content;
    }
}

@mixin sand-custom-text-large-locale {
    // 2 args: Generic rule applicator, accepts 2 entire rule-sets to add both latin and non-latin for large text mode
    @include enact-locale(non-latin) {
        @include sand-custom-text-large {
            @content;
        }
    }
}
