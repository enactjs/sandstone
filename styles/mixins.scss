@use "../styles/variables";
@use "../styles/variables-base";
@import "../../enact/packages/spotlight/styles/mixins";
@import "../../enact/packages/ui/styles/mixins";

// Allows a component to override the existing "disabled" rules and apply its own customized rules.
@mixin sand-disabled {
    @if content-exists() {
        @include disabled {
            opacity: 1; // reset standard disabled rule.
            @content;
        }
    }
}

@mixin sand-taparea($element-size) {
    @if (variables.$sand-smallest-tappable-size > $element-size) {
        // Take the size of the minimum tappable area, and subtract the element's current size.
        $_tap-offset: -((variables.$sand-smallest-tappable-size - $element-size) / 2);

        &::before {
            content: "";
            position: absolute;
            top: $_tap-offset;
            right: $_tap-offset;
            bottom: $_tap-offset;
            left: $_tap-offset;
            border-radius: variables-base.$sand-button-border-radius;
        }
    } @else if (variables.$sand-smallest-tappable-size <= $element-size) {
        // Remove the tappable area if the tap area is smaller than the element's current size.
        &::before {
            content: none;
        }
    }
}

// Add a padding to your component.
@mixin sand-spotlight-padding($values...) {
    @if (length($values) == 0) {
        padding-left: variables.$sand-spotlight-outset;
        padding-right: variables.$sand-spotlight-outset;
    } @else if (length($values) == 1) {
        padding: nth($values, 1) variables.$sand-spotlight-outset;
    } @else if (length($values) == 2) {
        padding: nth($values, 1) variables.$sand-spotlight-outset nth($values, 2);
    }
}

//
// Sandstone Font Applicator
//
@mixin sand-font(
    $family: variables.$sand-font-family,
    $nlfamily: variables.$sand-non-latin-font-family,
    $target: normal
) {
    @if content-exists() {
        font-family: $family;

        @include enact-locale(non-latin, $target) {
            font-family: $nlfamily;

            @content;
        }
    }
}

//
// Custom Text Size Mixins
//
@mixin sand-custom-text-size($values...) {
    @if (length($values) == 1) {
        @include sand-custom-text-large {
            font-size: $values;
        }
    } @else if (length($values) == 2) {
        @include sand-custom-text-large {
            font-size: nth($values, 1);
        }

        @include sand-custom-text-locale {
            font-size: nth($values, 2);
        }
    }
}

@mixin sand-custom-text-large {
    // Generic rule applicator for large text mode
    &:global(.largeText) {
        @content;
    }
}

@mixin sand-custom-text-locale {
    // Generic rule applicator for latin and non-latin large text mode
    @include enact-locale(non-latin) {
        @include sand-custom-text-large {
            @content;
        }
    }
}

@mixin sand-large-button-text {
    @include sand-font(variables.$sand-button-font-family, variables.$sand-non-latin-button-font-family) {
        font-size: variables.$sand-non-latin-button-large-font-size;
        font-style: variables.$sand-non-latin-button-font-style;
        font-weight: variables.$sand-non-latin-button-font-weight;
    }

    font-size: variables.$sand-button-font-size;
    font-style: variables.$sand-button-font-style;
    font-weight: variables.$sand-button-font-weight;

    @include font-kerning;
}

@mixin sand-small-button-text {
    @include sand-font(variables.$sand-button-small-font-family, variables.$sand-non-latin-button-font-family) {
        font-size: variables.$sand-non-latin-button-small-font-size;
        font-style: variables.$sand-non-latin-button-small-font-style;
        font-weight: variables.$sand-non-latin-button-small-font-weight;
    }

    font-size: variables.$sand-button-small-font-size;
    font-style: variables.$sand-button-small-font-style;
    font-weight: variables.$sand-button-small-font-weight;

    @include font-kerning;
}
