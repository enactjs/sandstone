// color-mixins.less
//
// Mixins specifically dependent on theme colors.
// Shortcuts for easily getting consistent colorization rules onto components.
//

@import "./mixins.less";

// ---------------------------------------
// Focus Shadow and background setup
// ---------------------------------------

// Establish rules assignment for before focus has happened
.sand-spotlight-resting-colors (@opacity: 0) {
	background-color: @sand-spotlight-bg-color;
	filter+_: drop-shadow(@sand-spotlight-resting-shadow);
	opacity: @opacity;
	transition+:
		filter @sand-spotlight-focus-animation-duration ease-out,
		opacity @sand-spotlight-focus-animation-duration ease-out;
	will-change+: filter, opacity;
}

// Establish rules assignment for after focus has happened
.sand-spotlight-focus-colors (@opacity: 1) {
	background-color: @sand-spotlight-bg-color;
	filter+_: drop-shadow(@sand-spotlight-focus-shadow);
	opacity: @opacity;
}

//
// The following 3 mixins should be used inside the `.sand-disabled()` mixin's ruleset.
//

// Assign the standard disabled rules
.sand-disabled-colors () {
	opacity: @sand-disabled-opacity;
}

// Assign the standard disabled rules of content to content nodes.
// This should be used on children of a root component node.
.sand-disabled-focus-content-colors () {
	opacity: @sand-disabled-focus-content-opacity;
}

// Assign the standard disabled rules of backgrounds to bg nodes.
// This should be used on children of a root component node.
.sand-disabled-focus-bg-colors () {
	opacity: @sand-disabled-focus-bg-opacity;
}
