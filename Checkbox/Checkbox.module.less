// Checkbox.module.less
//
@import "../styles/variables.less";
@import "../styles/mixins.less";
@import "../styles/skin.less";

// Local mixin to make rule application more consistent.
.checkboxColors (@color, @bg, @border) {
	color: @color;
	background-color: @bg;
	box-shadow: 0 0 0 @sand-checkbox-border-width @border;
}

.checkbox {
	display: inline-block;
	position: relative;

	.icon {
		margin: 0;	// Needed to apply here insetad of on `.checkbox` due to .icon.size precedence :(
		border-radius: @sand-checkbox-border-radius;
		position: relative;
		text-align: center;
	}

	//
	// Checkbox supports several states, each of which has a different set of colors.
	// All supported states are as follows:
	//
	// standalone
	// standalone selected
	// standalone indeterminate
	// standalone disabled
	// standalone disabled selected
	// standalone disabled indeterminate
	// asChild
	// asChild selected
	// asChild indeterminate
	// asChild disabled
	// asChild disabled selected
	// asChild disabled indeterminate
	//
	// Standalone is represented below as .spottable(). This handles focus and disabled states.
	// asChild depends on the status of the parent for focus and disabled states.
	//

	.applySkins({
		.icon {
			.checkboxColors(
				@sand-checkbox-color,
				@sand-checkbox-bg-color,
				@sand-checkbox-border-color
			);
		}

		&.selected {
			.icon {
				.checkboxColors(
					@sand-checkbox-selected-color,
					@sand-checkbox-selected-bg-color,
					@sand-checkbox-selected-border-color
				);
			}
		}

		&.indeterminate {
			.icon {
				.checkboxColors(
					@sand-checkbox-indeterminate-color,
					@sand-checkbox-indeterminate-bg-color,
					@sand-checkbox-indeterminate-border-color
				);
			}
		}

		// Spottable version of the Checkbox
		.spottable({
			.bg {
				position: absolute;
				.position(@sand-checkbox-container-position);
				border-radius: @sand-checkbox-container-border-radius;
				.sand-spotlight-resting-bg-colors();
			}
		});
	});
}

// When standalone or asChild is disabled
.disabled({
	& .checkbox,
	&.checkbox {
		.applySkins({
			&.selected {
				.icon {
					.checkboxColors(
						@sand-checkbox-disabled-selected-color,
						@sand-checkbox-disabled-selected-bg-color,
						@sand-checkbox-disabled-selected-border-color
					);
				}
			}
		});
	}
});

// When standalone or asChild is focused
.focus({
	& .checkbox,
	&.checkbox {
		.applySkins({
			.bg {
				.sand-spotlight-focus-bg-colors();
			}

			.icon {
				.checkboxColors(
					@sand-checkbox-focus-color,
					@sand-checkbox-focus-bg-color,
					@sand-checkbox-focus-border-color
				);
			}

			&.selected {
				.icon {
					.checkboxColors(
						@sand-checkbox-selected-focus-color,
						@sand-checkbox-selected-focus-bg-color,
						@sand-checkbox-selected-focus-border-color
					);
				}
			}

			&.indeterminate {
				.icon {
					.checkboxColors(
						@sand-checkbox-indeterminate-focus-color,
						@sand-checkbox-indeterminate-focus-bg-color,
						@sand-checkbox-indeterminate-focus-border-color
					);
				}
			}
		});
	}

	// When standalone or asChild is focused & disabled
	.disabled({
		& .checkbox,
		&.checkbox {
			.applySkins({
				&.selected {
					.icon {
						.checkboxColors(
							@sand-checkbox-focus-disabled-selected-color,
							@sand-checkbox-focus-disabled-selected-bg-color,
							@sand-checkbox-focus-disabled-selected-border-color
						);
					}
				}

				.sand-disabled({
					.icon {
						.sand-disabled-colors();
					}

					.focus({
						.bg {
							.sand-disabled-focus-bg-colors();
						}
						.icon {
							.sand-disabled-focus-content-colors();
						}
					});
				});
			});
		}
	});
});
