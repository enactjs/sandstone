// Checkbox.module.scss
//

@use "../styles/color-mixins";
@use "../styles/colors";
@use "../styles/mixins";
@use "../styles/skin";
@use "../styles/variables";

// Assign the colors all in one place
@mixin checkbox-colors($color, $bg, $border) {
	.icon {
		color: $color !important; // There is a 'color: inherit;' property coming from '.spottable' mixin that we need to overwrite in order to maintain checkbox styles for this POC
		background-color: $bg;
		box-shadow: 0 0 0 variables.$sand-checkbox-border-width $border;
	}
}

// Standalone version of the Checkbox
@mixin checkbox-standalone-rules {
	.bg {
		position: absolute;
		@include mixins.position(variables.$sand-checkbox-container-position);
		border-radius: variables.$sand-checkbox-container-border-radius;
		@include color-mixins.sand-spotlight-resting-bg-colors;
	}
}

// Resting States
@mixin checkbox-resting-states {
	@include checkbox-colors(colors.$sand-checkbox-text-color,
					colors.$sand-checkbox-bg-color,
					colors.$sand-checkbox-border-color
	);

	&.selected {
		@include checkbox-colors(colors.$sand-checkbox-selected-text-color,
						colors.$sand-checkbox-selected-bg-color,
						colors.$sand-checkbox-selected-border-color
		);
	}

	&.indeterminate {
		@include checkbox-colors(colors.$sand-checkbox-indeterminate-text-color,
						colors.$sand-checkbox-indeterminate-bg-color,
						colors.$sand-checkbox-indeterminate-border-color
		);
	}
}

// Focus States
@mixin checkbox-focus-states {
	@include checkbox-colors(colors.$sand-checkbox-focus-text-color,
					colors.$sand-checkbox-focus-bg-color,
					colors.$sand-checkbox-focus-border-color
	);
	.bg {
		@include color-mixins.sand-spotlight-focus-bg-colors;
	}
	&.selected {
		@include checkbox-colors(colors.$sand-checkbox-selected-focus-text-color,
						colors.$sand-checkbox-selected-focus-bg-color,
						colors.$sand-checkbox-selected-focus-border-color
		);
	}
	&.indeterminate {
		@include checkbox-colors(colors.$sand-checkbox-indeterminate-focus-text-color,
						colors.$sand-checkbox-indeterminate-focus-bg-color,
						colors.$sand-checkbox-indeterminate-focus-border-color
		);
	};
};

// Disabled States
@mixin checkbox-disabled-states {
	&.selected {
		@include checkbox-colors(colors.$sand-checkbox-disabled-selected-text-color,
						colors.$sand-checkbox-disabled-selected-bg-color,
						colors.$sand-checkbox-disabled-selected-border-color
		);
	}
};

// Disabled States + Focus States
@mixin checkbox-disabled-focus-states {
	// No custom rules for this state
	.bg {
		background-color: colors.$sand-checkbox-standalone-bg-disabled-focus-bg-color;
	}
	&.selected {
		@include checkbox-colors(colors.$sand-checkbox-focus-disabled-selected-text-color,
						colors.$sand-checkbox-focus-disabled-selected-bg-color,
						colors.$sand-checkbox-focus-disabled-selected-border-color
		);
	}
};

.checkbox {
	display: inline-block;
	position: relative;
	line-height: 0;

	.icon {
		margin: 0; // Needed to apply here instead of on `.checkbox` due to .icon.size precedence :(
		border-radius: variables.$sand-checkbox-border-radius;
		position: relative;
		text-align: center;
	}

	@include skin.applySkins {
		&.standalone {
			@include checkbox-standalone-rules;
		}

		@include mixins.spottable {
			@include checkbox-standalone-rules;
		}

		@include checkbox-resting-states;

		@include mixins.focus {
			@include checkbox-focus-states;
		}

		@include mixins.sand-disabled {
			.icon {
				@include color-mixins.sand-disabled-focus-content-colors;
			}

			@include checkbox-disabled-states;

			// Disabled + Focus
			@include mixins.focus {
				@include checkbox-disabled-focus-states;
			}
		}
	};
}

// The following target instances where the checkbox is inside another component and that
// component is receiving the disabled/focused etc states, rather than checkbox directly.
@include skin.applySkins(true) {
	@include mixins.focus {
		& .checkbox {
			@include checkbox-focus-states;
		}
	}
}

@include skin.applySkins(true) {
	@include mixins.disabled {
		& .checkbox {
			@include checkbox-disabled-states;
		}
	}
}







//@include skin.applySkins {
//	&:disabled {
//		& .checkbox {
//			@include checkbox-disabled-states;
//		}
//	}
//}

//@include skin.applySkins {
//	&:focus {
//		&:disabled {
//			@include checkbox-disabled-focus-states;
//
//			&.standalone {
//				.icon {
//					@include color-mixins.sand-disabled-focus-content-colors;
//				}
//			}
//		}
//	}
//}
