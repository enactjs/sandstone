// Checkbox.module.scss
//
@import "../styles/variables";
@import "../styles/mixins";
@import "../styles/colors";
@import "../styles/color-mixins";

// Assign the colors all in one place
@mixin checkbox-colors($color, $bg, $border) {
	.icon {
		color: $color !important; // There is a 'color: inherit;' property coming from '.spottable' mixin that we need to overwrite in order to maintain checkbox styles for this POC
		background-color: $bg;
		box-shadow: 0 0 0 $sand-checkbox-border-width $border;
	}
}

// Standalone version of the Checkbox
@mixin checkbox-standalone-rules {
	.bg {
		position: absolute;
		@include position($sand-checkbox-container-position);
		border-radius: $sand-checkbox-container-border-radius;
		@include sand-spotlight-resting-bg-colors;
	}
}

// Resting States
@mixin checkbox-resting-states {
	@include checkbox-colors(
		$sand-checkbox-text-color,
		$sand-checkbox-bg-color,
		$sand-checkbox-border-color
	);

	&.selected {
		@include checkbox-colors(
			$sand-checkbox-selected-text-color,
			$sand-checkbox-selected-bg-color,
			$sand-checkbox-selected-border-color
		);
	}

	&.indeterminate {
		@include checkbox-colors(
			$sand-checkbox-indeterminate-text-color,
			$sand-checkbox-indeterminate-bg-color,
			$sand-checkbox-indeterminate-border-color
		);
	}
}

// Focus States
@mixin checkbox-focus-states {
	@include checkbox-standalone-rules;

	.bg {
		@include sand-spotlight-focus-bg-colors;
	}

	@include checkbox-colors(
		$sand-checkbox-focus-text-color,
		$sand-checkbox-focus-bg-color,
		$sand-checkbox-focus-border-color
	);

	&.selected {
		@include checkbox-colors(
			$sand-checkbox-selected-focus-text-color,
			$sand-checkbox-selected-focus-bg-color,
			$sand-checkbox-selected-focus-border-color
		);
	}

	&.indeterminate {
		@include checkbox-colors(
			$sand-checkbox-indeterminate-focus-text-color,
			$sand-checkbox-indeterminate-focus-bg-color,
			$sand-checkbox-indeterminate-focus-border-color
		);
	}
;
}

// Disabled States
@mixin checkbox-disabled-states {
	// No custom rules for this state
	@include checkbox-colors(initial, initial, initial);

	&.selected {
		@include checkbox-colors(
			$sand-checkbox-disabled-selected-text-color,
			$sand-checkbox-disabled-selected-bg-color,
			$sand-checkbox-disabled-selected-border-color
		);
	}

	&.indeterminate {
		// No custom rules for this state
		@include checkbox-colors(initial, initial, initial);
	}
;
};

// Disabled States + Focus States
@mixin checkbox-disabled-focus-states {
	// No custom rules for this state
	@include checkbox-colors(initial, initial, initial);
	.bg {
		background-color: $sand-checkbox-standalone-bg-disabled-focus-bg-color;
	}

	&.selected {
		@include checkbox-colors(
			$sand-checkbox-focus-disabled-selected-text-color,
			$sand-checkbox-focus-disabled-selected-bg-color,
			$sand-checkbox-focus-disabled-selected-border-color
		);
	}

	&.indeterminate {
		// No custom rules for this state
		@include checkbox-colors(initial, initial, initial);
	}
;
};

.checkbox {
	display: inline-block;
	position: relative;
	line-height: 0;

	.icon {
		margin: 0; // Needed to apply here instead of on `.checkbox` due to .icon.size precedence :(
		border-radius: $sand-checkbox-border-radius;
		position: relative;
		text-align: center;
	}

	// Set up the background for standalone (and independently spottable) versions
	&.standalone {
		//@include checkbox-standalone-rules;
	}

	// Spottable version of the Checkbox
	.spottable {
		@include checkbox-standalone-rules;
	}

	// Resting
	@include checkbox-resting-states;

	// Focus
	&:focus {
		@include checkbox-focus-states;
	}

	&:disabled {
		&:focus {
			//@include checkbox-disabled-focus-states;
		}

		@include sand-disabled {
			.icon {
				@include sand-disabled-focus-content-colors;
			}

			@include checkbox-disabled-states;

			&:focus {
				@include checkbox-disabled-focus-states;
			}
		}
	}
}
