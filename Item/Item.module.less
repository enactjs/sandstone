// Item.module.less
//
@import "../styles/mixins.less";
@import "../styles/skin.less";
@import "../styles/variables.less";

.item {
	.selected {
		/* Available for customization */
	}

	font-size: @sand-item-font-size;
	.sand-spotlight-padding(@sand-item-vertical-padding);

	font-weight: @sand-item-font-weight;
	.enact-locale-line-height(@sand-item-line-height, @sand-tallglyph-item-line-height);
	height: @sand-item-height;
	display: flex;
	position: relative;
	color: inherit;
	margin: @sand-item-margin;

	.bg {
		position: absolute;
		.position(0);
		border-radius: @sand-item-border-radius;
	}

	.slotAfter,
	.slotBefore {
		line-height: 0;  // Attempt to get the children of this to always vertically-align their middles with the text

		> * {
			// vertically align all direct children
			vertical-align: middle;

			// Remove the specific edge margin on direct children so the slot can define the proper
			// spacing for itself.
			&:first-child {
				margin-inline-start: 0;
			}
			&:last-child {
				margin-inline-end: 0;
			}
		}
	}

	.slotAfter {
		margin-inline-start: @sand-item-slotafter-spacing;
	}

	.slotBefore {
		margin-inline-end: @sand-item-slotbefore-spacing;
	}

	&.hasLabel {
		height: @sand-item-withlabel-height;

		.itemContent {
			&.labelAfter,
			&.labelBelow {
				.content { order: 1; }
				.label   { order: 2; }
			}

			&.labelAbove,
			&.labelBefore {
				.content { order: 2; }
				.label   { order: 1; }
			}
		}
	}

	&.inline {
		display: inline-flex;
		max-width: @sand-item-inline-max-width;

		// Apply to the marquee content area to tell it to expand to the available width of the container
		.content,
		.itemContent {
			flex-shrink: 1;
			overflow: auto;
		}
	}

	&.centered {
		.itemContent {
			max-width: fit-content;
		}
	}

	// Text
	.label {
		font-size: @sand-item-label-font-size;
		font-weight: inherit;
		.enact-locale-line-height(@sand-item-label-line-height, @sand-tallglyph-item-label-line-height);
	}

	.sand-custom-text({
		font-size: @sand-item-font-size-large;
		.enact-locale-line-height(@sand-item-line-height-large, @sand-tallglyph-item-line-height-large);

		.label {
			font-size: @sand-item-label-font-size-large;
		}
	});

	&.large { /* Needed to prevent global class being added in the DOM */ }

	&.small {
		font-size: @sand-item-small-font-size;

		font-weight: @sand-item-small-font-weight;
		height: @sand-item-small-height;
		.enact-locale-line-height(@sand-item-small-line-height, @sand-tallglyph-item-small-line-height);

		&.hasLabel {
			height: @sand-item-small-withlabel-height;
		}

		.label {
			font-size: @sand-item-small-label-font-size;

			font-weight: inherit;
			line-height: @sand-item-small-label-line-height;
		}

		.enact-locale-tallglyph({
			font-size: @sand-item-small-font-size;
		});

		.sand-custom-text({
			font-size: @sand-item-small-font-size-large;
			.enact-locale-line-height(@sand-item-small-line-height-large, @sand-tallglyph-item-small-line-height-large);
		});
	}

	.locale-japanese-line-break();

	// Skin colors
	.applySkins({
		.bg {
			.sand-spotlight-resting-bg-colors();
		}

		.label {
			color: @sand-item-label-color;
		}

		.focus({
			.sand-spotlight-focus-text-colors();

			.bg {
				.sand-spotlight-focus-bg-colors();
				background: @sand-item-focus-background;
			}

			.label {
				color: @sand-item-focus-label-color;
			}
		});

		:global(.noAnimation) & {
			.focus({
				.bg {
					box-shadow: none;
				}
			})
		}

		.sand-disabled({
			.slotBefore,
			.itemContent,
			.slotAfter {
				.sand-disabled-colors();
			}

			.focus({
				.bg {
					.sand-disabled-focus-bg-colors();
					background-color: @sand-item-disabled-focus-bg-color;
				}

				.slotBefore,
				.itemContent,
				.slotAfter {
					.sand-disabled-focus-content-colors();
				}
			});
		});
	});
}
