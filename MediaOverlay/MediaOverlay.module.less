@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.mediaOverlay {
	.sand-spotlight-padding(@sand-mediaoverlay-padding-top-bottom);

	display: block;
	position: relative;
	width: @sand-mediaoverlay-width;
	height: auto;

	.bg {
		position: absolute;
		.position(0);
		opacity: 0;
		transition: filter 300ms ease-out, opacity 300ms ease-out;
		will-change: filter, opacity;
		border-radius: @sand-mediaoverlay-border-radius;
	}

	.mediaContainer {
		position: relative;

		.media {
			display: block;
			position: relative; // it is for z-index;
			width: 100%;
			height: 100%;
			margin: 0;
		}

		.image,
		.textLayout {
			position: absolute;
			.position(0);
		}

		.textLayout {
			margin: @sand-mediaoverlay-padding-left-right;
		}

		.image {
			margin: 0;
			height: auto;
			width: auto;
		}

		.text {
			font-weight: @sand-mediaoverlay-font-weight;
		}

		.progressBar {
			position: absolute;
			.position(auto, 0, 0);
			margin: 0;

			.bar {
				border-radius: 0;
			}

			.applySkins({
				.bar {
					background-color: @sand-mediaoverlay-pg-bar-color;
				}
			})
		}
	}

	.captionContainer {
		min-height: 192px;
		margin-top: 24px;
	}

	.focus({
		.progressBar {
			.applySkins({
				.fill {
					background-color: @sand-mediaoverlay-pg-fill-focus-color;
				}
			})
		}
	});

	.caption,
	.subCaptionBelow {
		.sand-font({
            font-size: 48px;
        });
        font-size: 48px;
	}

	.subCaption {
		.sand-font({
            font-size: 60px;
        });
        font-size: 60px;
	}

	.applySkins({
		.bg {
			filter: drop-shadow(@sand-mediaoverlay-bg-shadow);
		}
		.caption,
		.subCaption {
			color: #E6E6E6;
		}
		.subCaptionBelow {
			color: #ABAEB3;
		}
		.focus({
			.caption,
			.subCaption,
			.subCaptionBelow {
				color: #4C5059;
			}
			.bg {
				background-color: @sand-mediaoverlay-focus-bg-color;
				opacity: 1;
				filter: drop-shadow(@sand-mediaoverlay-focus-bg-shadow);
			}
		});
		.disabled({
			// The global disabled rule handles the non-focused state, so no rules are necessary here.

			.focus({
				opacity: @sand-disabled-opacity;

				.media,
				.image,
				.textLayout {
					// We're setting the parent's opacity, so we need to "unset" the children,
					// so they don't get double-set, becoming more transparent than our intent.
					opacity: 1;
				}
			});
		});
	});
}
