@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.mediaOverlay {
	display: block;
	position: relative;
	padding: @sand-mediaoverlay-padding-top-bottom @sand-mediaoverlay-padding-left-right;
	width: @sand-mediaoverlay-width;
	height: auto;

	.media {
		display: block;
		position: relative; // it is for z-index;
		width: 100%;
		height: 100%;
		margin: 0;
	}

	.image,
	.textLayout {
		position: absolute;
		.position(0);
	}

	.textLayout {
		margin: (@sand-mediaoverlay-padding-left-right * 2);
	}

	.image {
		margin: @sand-mediaoverlay-image-margin-top-bottom @sand-mediaoverlay-image-margin-left-right;
		height: auto;
		width: auto;
	}

	.text {
		font-weight: @sand-mediaoverlay-font-weight;
	}

	.bg {
		position: absolute;
		.position(0);
		opacity: 0;
		transition: filter 300ms ease-out, opacity 300ms ease-out;
		will-change: filter, opacity;
		border-radius: @sand-mediaoverlay-border-radius;
	}

	.focus({
		.progressBar {
			.applySkins({
				.fill {
					background-color: @sand-mediaoverlay-pg-fill-focus-color;
				}
			})
		}
	});

	.progressBar {
		position: absolute;
		.position(auto, 0, 0);
		margin-bottom: @sand-mediaoverlay-pg-margin-bottom;

		.bar {
			border-radius: 0;
		}

		.applySkins({
			.bar {
				background-color: @sand-mediaoverlay-pg-bar-color;
			}
		})
	}

	.applySkins({
		.bg {
			filter: drop-shadow(@sand-mediaoverlay-bg-shadow);
		}

		.focus({
			.bg {
				background-color: @sand-mediaoverlay-focus-bg-color;
				opacity: 1;
				filter: drop-shadow(@sand-mediaoverlay-focus-bg-shadow);
			}
		});
		.disabled({
			// The global disabled rule handles the non-focused state, so no rules are necessary here.

			.focus({
				opacity: @sand-disabled-opacity;

				.media,
				.image,
				.textLayout {
					// We're setting the parent's opacity, so we need to "unset" the children,
					// so they don't get double-set, becoming more transparent than our intent.
					opacity: 1;
				}
			});
		});
	});
}
