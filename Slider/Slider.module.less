// Slider.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.slider {
	@knob-transform-resting: @sand-translate-center scale(@sand-slider-knob-resting-state-scale);
	@knob-transform-active: @sand-translate-center scale(1);

	position: relative;
	margin: 0 @sand-spotlight-outset;
	// Set both the V and H sizes here, so they can be easily overridden, both internally below and by component consumers.
	height: @sand-slider-bar-height;
	width: @sand-slider-bar-height;
	box-sizing: content-box;
	direction: ltr;
	touch-action: none;

	.progressBar {
		position: relative;
		height: 100%;
		width: 100%;

		.bar {
			border-radius: @sand-progressbar-bar-border-radius;
			overflow: hidden;
		}
	}

	.knob {
		--sand-tooltip-offset: @sand-slider-tooltip-offset;

		position: absolute;
		will-change: left, bottom;

		&::before {
			content: "";
			position: absolute;
			height: @sand-slider-knob-height;
			width: @sand-slider-knob-width;
			transform: @knob-transform-resting;
			border-radius: (@sand-slider-knob-height / 2);
			border: @sand-button-border-width solid transparent;
			box-sizing: border-box;
			will-change: transform;
			transition: transform ease-out 100ms;
		}
	}

	&.showAnchor {
		.knob {
			z-index: 1;
		}

		.progressBar {
			&::after {
				content: "";
				position: absolute;
				transform: @sand-translate-center;
			}

			&.horizontal {
				&::after {
					width: @sand-progressbar-anchor-width;
					height: @sand-progressbar-anchor-height;
					top: 50%;
					left: ~"calc(var(--ui-progressbar-proportion-anchor) * 100%)";
				}
			}

			&.vertical {
				&::after {
					width: @sand-progressbar-anchor-height;
					height: @sand-progressbar-anchor-width;
					bottom: ~"calc(var(--ui-progressbar-proportion-anchor) * 100%)";
					left: 50%;
					transform: translate(-50%, 50%);
				}
			}
		}
	}

	.disabled({
		touch-action: auto;
	});

	.sand-custom-text({
		.knob::before {
			height: @sand-slider-knob-height-large;
			width: @sand-slider-knob-width-large;
			border-radius: (@sand-slider-knob-height-large / 2);
		}
	});

	&.horizontal {
		@h-gap: (@sand-slider-knob-width / 2);
		@v-gap: (@sand-slider-knob-height - @sand-slider-bar-height) / 2;
		width: auto;
		padding: @v-gap @h-gap;

		.fill,
		.load {
			height: 100%;
		}

		.knob {
			left: ~"calc(var(--ui-slider-proportion-end-knob) * 100%)";
		}

		.sand-custom-text({
			@h-gap-large: (@sand-slider-knob-width-large / 2);
			padding: ((@sand-slider-knob-height-large - @sand-slider-bar-height) / 2) @h-gap-large;
		});
	}

	&.vertical {
		@h-gap: ((@sand-slider-knob-height - @sand-slider-bar-height) / 2);
		@v-gap: (@sand-slider-knob-width / 2);
		padding: @v-gap @h-gap;
		min-height: 240px;
		display: inline-block;
		vertical-align: top;

		.fill,
		.load {
			width: 100%;
		}

		.knob {
			bottom: ~"calc(var(--ui-slider-proportion-end-knob) * 100%)";
			top: auto;
		}

		.sand-custom-text({
			@v-gap-large: (@sand-slider-knob-width / 2);
			padding: @v-gap-large ((@sand-slider-knob-height-large - @sand-slider-bar-height) / 2);
		});
	}

	.applySkins({
		.bar {
			background-color: @sand-slider-bar-bg-color;
		}

		.fill {
			background-color: @sand-slider-fill-bg-color;
		}

		.load {
			background-color: @sand-slider-load-bg-color;
		}

		.knob::before {
			background-color: @sand-slider-knob-bg-color;
			border-color: @sand-slider-knob-border-color;
		}

		.focus({
			background-color: transparent;

			.bar {
				background-color: @sand-slider-focus-bar-bg-color;
			}

			.fill {
				background-color: @sand-slider-focus-fill-bg-color;
			}

			.load {
				background-color: @sand-slider-focus-load-bg-color;
			}

			.knob::before {
				background-color: @sand-slider-focus-knob-bg-color;
				border-color: @sand-slider-focus-knob-border-color;
				box-shadow: @sand-slider-focus-knob-shadow;
				transform: @knob-transform-resting;
			}

			&.active,
			&.pressed {
				.bar {
					background-color: @sand-slider-active-bar-bg-color;
				}

				.fill {
					background-color: @sand-slider-active-fill-bg-color;
				}

				.load {
					background-color: @sand-slider-active-load-bg-color;
				}

				.knob::before {
					transform: @knob-transform-active;
				}
			}

			.disabled({
				.bar {
					opacity: @sand-slider-disabled-bar-opacity;
				}

				.knob::before {
					background-color: @sand-slider-disabled-focus-knob-bg-color;
					border-color: @sand-slider-focus-knob-border-color;
					transform: @knob-transform-resting;
				}
			});
		});

		.disabled({
			opacity: 1;

			.bar {
				opacity: @sand-slider-disabled-bar-opacity;
			}

			.knob::before {
				background-color: @sand-slider-disabled-knob-bg-color;
				border-color: @sand-slider-knob-border-color;
			}

			&.showAnchor {
				.progressBar {
					&::after {
						opacity: @sand-slider-disabled-bar-opacity;
					}
				}
			}
		});

		&.noFill {
			.fill {
				background-color: transparent;
			}

			.focus({
				&,
				&.active,
				&.pressed {
					.fill {
						background-color: transparent;
					}
				}
			});
		}

		&.showAnchor {
			.progressBar {
				&::after {
					background-color: @sand-progressbar-bar-bg-color;
				}
			}
		}
	});
}

.muted({
	.slider {
		.applySkins({
			.focus({
				.knob::before {
					background-color: @sand-slider-knob-bg-color;
				}
			});
		});
	}
}, parent);


.tooltip {
	// Offset tooltip origin because `.knob` centered tooltip within the progressbar (when tooltip original origin is at the edge of `.progressbar`).
	&.horizontal {
		&.above {
			transform: translateY(@sand-slider-tooltip-above-offset);
		}

		&.below {
			transform: translateY(@sand-slider-tooltip-below-offset);
		}
	}

	&.vertical {
		&.left,
		&.before,
		:global(.enact-locale-right-to-left) &.after {
			transform: translateX(@sand-slider-tooltip-before-offset);
		}

		&.right,
		&.after,
		:global(.enact-locale-right-to-left) &.before {
			transform: translateX(@sand-slider-tooltip-after-offset);
		}
	}
}
