// Button.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.button {
	// default is size="large"
	.sand-large-button-text();
	height: @sand-button-height;
	line-height: (@sand-button-height - (2 * @sand-button-border-width));
	border-radius: @sand-button-border-radius;
	min-width: @sand-button-height;
	max-width: @sand-button-max-width;
	padding: 0 @sand-button-h-padding;
	margin: 0 @sand-button-h-margin;
	text-align: center;
	vertical-align: middle;
	.sand-taparea(@sand-button-height);

	.sand-custom-text({
		font-size: @sand-button-font-size-large;
		height: @sand-button-height-large;
		min-width: @sand-button-height-large;
		line-height: (@sand-button-height-large - (2 * @sand-button-border-width));
	});

	.bg {
		border-width: @sand-button-border-width;
		border-radius: @sand-button-border-radius;
	}

	.client {
		padding: @sand-button-border-width 0;	// We account for the button border-width here, since that is applied to .bg, not .client. Having these match means the text doesn't overlap the border
		border-radius: inherit;
	}

	.icon {
		flex-shrink: 0;
		.margin-start-end(@sand-button-icon-margin-start, @sand-button-icon-margin-end);
	}

	// Button with icon and text
	&.hasIcon {
		padding: 0 @sand-button-with-icon-h-padding;
	}

	&.iconAfter {
		.client {
			flex-direction: row-reverse;
		}

		.icon {
			.margin-start-end(@sand-button-icon-position-after-margin-start, @sand-button-icon-position-after-margin-end);
		}
	}

	&.red,
	&.green,
	&.yellow,
	&.blue {
		.padding-start-end(@sand-button-colordot-padding-start, @sand-button-h-padding);

		// IconButton-like Button scenario
		.client::before {
			// Colored under-bar
			content: "";
			position: absolute;
			bottom: @sand-button-colordot-bottom;
			left: 50%;
			width: @sand-button-colordot-width;
			height: @sand-button-colordot-height;
			border-radius: @sand-button-colordot-border-radius;
			transform: translate(-50%, 50%);
		}

		// Standard Button Scenario
		&.minWidth {
			// Update icon's margin to allow more room for the colordot
			.icon {
				-webkit-margin-start: 0;
			}

			.client {
				-webkit-margin-start: @sand-button-colordot-width;
				-webkit-padding-start: @sand-button-colordot-h-margin; // The gap between the color-dot and the content matches the space between the regular icon and the text

				&::before {
					// Colored side-bar
					bottom: 50%;
					transform: translateY(50%);
					.position-start-end(-@sand-button-colordot-width, initial);
				}
			}
		}
	}

	//**
	//* The marquee container of the client area. Added by {@link sandstone/MarqueeDecorator}.
	//* @public
	//*/
	.marquee {
		flex-grow: 1;
	}

	// Only center the text if there is no icon. Otherwise, the default is to just leave its
	// alignment alone, since we don't want to try to override marquee's directionality alignment.
	&:not(.hasIcon):not(.hasColor) {
		.marquee {
			text-align: center;
		}
	}

	&.minWidth {
		min-width: @sand-button-min-width;
	}

	&.small {
		.sand-small-button-text();
		height: @sand-button-small-height;
		min-width: @sand-button-small-height;
		max-width: @sand-button-small-max-width;
		line-height: (@sand-button-small-height - (2 * @sand-button-border-width));
		margin: 0 @sand-button-small-h-margin;
		padding-left: @sand-button-small-h-padding;
		padding-right: @sand-button-small-h-padding;
		.sand-taparea(@sand-button-small-height);

		// Standard Button Scenario
		&.minWidth {
			min-width: @sand-button-small-min-width;
		}

		.icon {
			.margin-start-end(@sand-button-icon-small-margin-start, @sand-button-icon-small-margin-end);
		}

		&.iconAfter {
			.icon {
				.margin-start-end(@sand-button-icon-position-after-small-margin-start, @sand-button-icon-position-after-small-margin-end);
			}
		}

		&.red,
		&.green,
		&.yellow,
		&.blue {
			.padding-start-end(@sand-button-small-colordot-padding-start, @sand-button-small-h-padding);

			// IconButton-like Button scenario
			.client::before {
				bottom: @sand-button-small-colordot-bottom;
				width: @sand-button-small-colordot-width;
				height: @sand-button-colordot-height;
			}

			// Standard Button Scenario
			&.minWidth {
				.client {
					-webkit-margin-start: @sand-button-small-colordot-width;

					&::before {
						bottom: 50%;
						.position-start-end(-@sand-button-small-colordot-width, initial);
					}
				}

				.icon {
					-webkit-margin-start: 0;
				}

				&.iconAfter {
					.icon {
						// Override the above rule
						-webkit-margin-start: @sand-button-icon-position-after-small-margin-start;
					}
				}
			}
		}

		.sand-custom-text({
			font-size: @sand-button-small-font-size-large;
			height: @sand-button-small-height-large;
			min-width: @sand-button-small-height-large;
			line-height: (@sand-button-small-height-large - (2 * @sand-button-border-width));

			&.minWidth {
				min-width: @sand-button-small-min-width;
			}
		});
	}

	// IconButton rules
	&.iconOnly {
		&.iconAfter,
		&.iconBefore,
		&.large,
		&.small {
			padding: @sand-button-icon-small-padding;

			.icon {
				margin: 0; // reset margins for `IconButton`
			}

			&.red,
			&.green,
			&.yellow,
			&.blue {
				.client::before {
					width: @sand-button-icon-only-colordot-width;
					height: @sand-button-icon-only-colordot-height;
				}
			}
		}

		&.large {
			padding: @sand-button-icon-padding; // adjust the padding to center the icon because of the existence of `Marquee` as a sibling even if there are no children in `Marquee`
		}

		&.red,
		&.green,
		&.yellow,
		&.blue {
			.client::before {
				width: @sand-button-icon-only-colordot-width;
				height: @sand-button-icon-only-colordot-height;
			}
		}
	}

	// Skin colors
	.applySkins({
		&,
		:global(.enact-a11y-high-contrast) & {
			color: @sand-button-text-color;
		}

		.bg {
			border-color: transparent;
			.sand-spotlight-resting-colors();
			will-change+: transform;
			transition+: transform @sand-button-focus-duration ease-out;
		}

		&.opaque {
			color: @sand-button-text-color;

			.bg {
				background-color: @sand-button-bg-color;
				opacity: @sand-button-bg-opacity;
			}
		}

		&.transparent {
			color: @sand-text-color;

			.bg {
				background-color: @sand-button-transparent-bg-color;
				opacity: @sand-button-transparent-bg-opacity;
			}
		}

		&.red .client::before {
			background-color: @sand-remote-button-red-color;
		}
		&.green .client::before {
			background-color: @sand-remote-button-green-color;
		}
		&.yellow .client::before {
			background-color: @sand-remote-button-yellow-color;
		}
		&.blue .client::before {
			background-color: @sand-remote-button-blue-color;
		}

		.focus({
			color: @sand-button-focus-text-color;

			.bg {
				.sand-spotlight-focus-colors();
			}

			// The technique below is special handling for opaque buttons, which have an opaque
			// color defined for the initial background-color. This means we can't use the
			// traditional opacity change to animate the difference. Instead, this smoothly applies
			// (via transition) a series of filters that match the spotlight-focus bg color. The
			// values were manually calculated to perfectly match, taking the resting bg-color and
			// adjusting it to become the focus-bg-color. If either color value changes, these
			// adjustments must be recalculated. This is not automatic. It may be possible to
			// autonomously calculate this in the future...
			&.opaque {
				.bg {
					.sand-spotlight-focus-colors();
					background-color: @sand-button-bg-color; // We use the resting colors here and augment the color using a filter so it can be animated smoothly
					filter+_: saturate(0) brightness(1.89);
				}
			}
		});

		// Button-non-disabled rules
		&:not([disabled]) {
			.focus({
				z-index: 1;

				.bg {
					transform: @sand-button-focus-bg-transform;
				}

				&.small .bg {
					transform: @sand-button-small-focus-bg-transform;
				}

				&.pressed,
				&:active {
					.bg {
						transform: @sand-button-pressed-bg-transform;
					}

					&.small {
						.bg {
							transform: @sand-button-small-pressed-bg-transform;
						}
					}
				}
			});
		}
	});
}
