// Sandstone Base App styles
//

// Core Rules
@import "~@enact/ui/styles/core.less";
@import "~@enact/ui/styles/mixins.less";

// Sandstone Internal Rules
@import "../styles/internal/fonts.less";

// Sandstone Rules
@import "../styles/mixins.less";
@import "../styles/skin.less";
@import "../styles/variables.less";

.applySkins({
	// color: @sand-text-color;

	::selection {
		color: @sand-selection-color;
		background-color: @sand-selection-bg-color;
	}

	// Disabled Components
	.disabled({
		.sand-disabled-colors();

		cursor: default;

		// Disabled children of disabled components
		.disabled({
			opacity: 1;
		}, parent);
	});
});

.root {
	.sand-text-base(@sand-base-font-size, self);
	font-weight: normal;
	font-style: normal;
	letter-spacing: normal;
	// Prevent Chrome from highlighting tapped elements
	-webkit-tap-highlight-color: transparent;

	&.bg,
	& > .bg {
		padding: @sand-app-keepout;
	}

	.enact-locale-rtl({
		direction: rtl;
	}, self);

	:focus {
		// Prevent Chrome's default focus treatment
		outline: none;
	}
}

// Skin colors
// This is outside the `.root` class above because high-contrast is applied to root
// as well as skins. The high-contrast mixin (in skin.less) refers to high-contrast
// and the skins node as descent, rather than on the same node. This allows the
// styling to be applied without costly duplication of all rules in the skin mixin.
//.applySkins({
//	&.bg,
//	> .bg {
//		background-color: @sand-bg-color;
//	}
//});
