// Input.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.input {
	.sand-body-text();

	padding: 0;
	border: 0;
	cursor: pointer;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	flex-grow: 1;
	text-indent: @sand-inputfield-text-indent;

	&[type=number] {
		-moz-appearance: textfield;

		&::-webkit-inner-spin-button,
		&::-webkit-outer-spin-button {
			-webkit-appearance: none;
		}

		&:hover {
			-moz-appearance: none;
		}
	}

	&[placeholder] {
		text-overflow: ellipsis;
	}

	.focus({
		cursor: text;
	});

	.disabled({
		cursor: default;
	});

	:global(.enact-locale-right-to-left) & {
		text-align: right;
	}
}

.inputField {
	display: inline-flex;
	position: relative;
	padding: @sand-inputfield-padding;
	margin: @sand-inputfield-margin;
	box-sizing: border-box;
	vertical-align: middle;
	align-items: center;

	.bg {
		position: absolute;
		.position(0);
		border-radius: @sand-inputfield-border-radius;
	}

	.input,
	.inputHighlight {
		z-index: 1;
		font-size: @sand-input-font-size;
		font-weight: @sand-inputfield-font-weight;
	}

	.input,
	.inputHighlight,
	.iconBefore,
	.iconAfter {
		line-height: @sand-inputfield-height;
		height: @sand-inputfield-height;
		vertical-align: middle;
	}

	.inputHighlight {
		position: absolute;
		top: 0;
		height: @sand-inputfield-highlight-height;
		max-width: @sand-inputfield-highlight-max-width;
		overflow: hidden;
		letter-spacing: 0.1px;
		pointer-events: none;
		opacity: 0;
		z-index: -1;
	}

	&.small {
		height: @sand-inputfield-small-height;

		.iconBefore,
		.iconAfter {
			line-height: @sand-inputfield-small-height;
			height: @sand-inputfield-small-height;
		}

		.input {
			font-size: @sand-inputfield-small-font-size;
			height: @sand-inputfield-small-height;
		}

		.inputHighlight {
			line-height: @sand-inputfield-small-height;
			height: @sand-inputfield-small-height;
			max-width: @sand-inputfield-highlight-small-max-width;
		}
	}

	.iconBefore,
	.iconAfter {
		flex: 0 0;
	}

	.iconAfter {
		.padding-start-end(@sand-inputfield-icon-spacing, 0);
	}

	.iconBefore {
		.padding-start-end(0, @sand-inputfield-icon-spacing);
	}

	// RIGBY NOTE: multiline is a NOT YET IMPLEMENTED feature that combines <input> and <textarea>
	// into one control, to simplify input handling.
	&.multiline {
		display: block;
		padding: 24px 36px;
		border-radius: 24px;
	}

	// an Input that isn't spottable is behaviorly disabled but not visually
	&:not(:global(.spottable)) .input {
		pointer-events: none;
	}

	.tooltip {
		margin-top: @sand-inputfield-invalid-tooltip-margin-top;

		.tooltipLabel {
			font-size: @sand-inputfield-invalid-tooltip-font-size;
			font-weight: @sand-inputfield-invalid-tooltip-font-weight;
		}
	}

	// Skin colors
	.applySkins({
		color: @sand-inputfield-text-color;

		.bg {
			.sand-spotlight-resting-bg-colors(@sand-inputfield-bg-opacity);
		}

		.input {
			background: transparent;
			color: inherit;

			.input-placeholder({
				color: @sand-inputfield-placeholder-color;
			});

			&:focus-within {
				color: @sand-inputfield-focus-text-color;

				.input-placeholder({
					color: @sand-inputfield-placeholder-active-color;
				});
			}
		}

		&.invalid input {
			color: @sand-red;
		}

		.inputHighlight {
			color: transparent;
			background-color: transparent;
			// Set `.inputHighlight` background color to make it appear that the text is highlighted
			// when `.input` has transparent background and when `.inputField` has focus, but not `.input`.
			// background-color: @sand-spotlight-color;
		}

		.tooltip {
			.tooltipLabel {
				color: @sand-inputfield-invalid-tooltip-color;
			}
		}

		// For when the field container has spotlight focus
		.focus({
			color: @sand-inputfield-focus-text-color;

			.bg {
				.sand-spotlight-focus-bg-colors();
			}

			.input {
				.input-placeholder({
					color: @sand-inputfield-placeholder-active-color;
				});
			}

			// Set `.inputHighlight` opacity to make it appear that the text is highlighted
			// when `.input` has transparent background and when `.inputField` has focus, but not `.input`.
			// .inputHighlight {
			// 	opacity: 1;
			// }
		});

		// For when the HTML input field has focus (someone is typing)
		&:focus-within {
			color: @sand-inputfield-focus-text-color;

			.bg {
				.sand-spotlight-focus-bg-colors();
				filter: unset;
			}
		}

		.sand-disabled({
			.bg {
				.sand-disabled-focus-bg-colors(@bg: {
					filter+_: brightness(0.28);  // Adjusting the background color to match the gui designs. Filter-shift the color.
				}); // Apply a proper opacity to the disabled background, according to the designs.
			}

			.input {
				.sand-disabled-colors();
				color: @sand-inputfield-disabled-text-color;
			}

			.focus({
				.bg {
					.sand-disabled-focus-bg-colors();
				}

				.input {
					.sand-disabled-focus-content-colors();
				}
			});
		});
	});
}
