// Switch.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

// Interally theme our implementation using published classes from ToggleItem and ToggleIcon
.toggleIcon {
	border-radius: (@sand-toggleswitch-height / 2);
	width: @sand-toggleswitch-width;
	height: @sand-toggleswitch-height;
	line-height: @sand-toggleswitch-height;
	font-family: @sand-icon-font-family;
	position: relative;
	display: inline-block;
	text-align: left;
	cursor: default;

	.moon-custom-text({
		width: @sand-toggleswitch-width-large;
		height: @sand-toggleswitch-height-large;
		border-radius: (@sand-toggleswitch-height-large / 2);
	});


	.moon-taparea(@sand-toggleswitch-height);

	.icon {
		visibility: visible;
		left: 0;
		width: @sand-toggleswitch-height;
		height: inherit;
		font-size: (@sand-toggleswitch-height * 2);
		line-height: inherit;
		margin: 0;
	}

	&.selected {
		.icon {
			left: (@sand-toggleswitch-width - @sand-toggleswitch-height);

			.moon-custom-text({
				left: (@sand-toggleswitch-width-large - @sand-toggleswitch-height-large);
			});
		}
	}

	&.animated {
		-webkit-transition: background-color 0.2s;
		transition: background-color 0.2s;

		.icon {
			-webkit-transition: left 0.2s, color 0.2s;
			transition: left 0.2s, color 0.2s;
		}
	}

	// Skin colors
	.applySkins({
		background-color: @sand-checkbox-toggle-switch-bg-color;
		box-shadow: 0 0 0 @sand-checkbox-toggle-switch-border-width @sand-checkbox-toggle-switch-border-color;

		.icon {
			background-color: transparent;
			color: @sand-checkbox-toggle-switch-color;
		}

		&.selected {
			background-color: @sand-checkbox-toggle-switch-selected-bg-color;
			box-shadow: 0 0 0 @sand-checkbox-toggle-switch-selected-border-width @sand-checkbox-toggle-switch-selected-border-color;

			.icon {
				color: @sand-checkbox-toggle-switch-selected-color;

				// :global(.spottable):focus & {
				// 	color: @sand-checkbox-toggle-switch-selected-color;
				// }
			}
		}

		.disabled({
			background-color: @sand-checkbox-toggle-switch-bg-color;
			opacity: @sand-disabled-opacity;

			.icon {
				color: @sand-checkbox-toggle-switch-color;
			}

			&.selected {
				background-color: @sand-checkbox-toggle-switch-spotlight-selected-bg-color;

				.icon {
					color: @sand-checkbox-toggle-switch-spotlight-selected-color;
				}
			}
		});
	});
}

// When a parent is disabled
.disabled({
	.toggleIcon {
		.applySkins({
			opacity: 1;
		});
	}
});

// Keep the switch handle (the icon) a constant color regardless of focus state.
.focus({
	.toggleIcon {
		// Skin colors
		.applySkins({
			.icon {
				color: @sand-checkbox-toggle-switch-color;
			}

			&.selected {
				background-color: @sand-checkbox-toggle-switch-spotlight-selected-bg-color;

				.icon {
					color: @sand-checkbox-toggle-switch-spotlight-selected-color;
				}
			}
		});
	}

	.disabled({
		.toggleIcon {
			.applySkins({
				opacity: @sand-disabled-opacity;
			});
		}
	});
}, parent);
