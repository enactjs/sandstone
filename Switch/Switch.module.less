// Switch.module.less
//
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.switch {
	display: inline-block;
	position: relative;

	.client {
		border-radius: @sand-switch-border-radius;
		width: @sand-switch-width;
		height: @sand-switch-height;
		position: relative;
		text-align: left;
		cursor: default;
	}

	.icon {
		visibility: visible;
		left: 0;
		width: @sand-switch-icon-height;
		height: inherit;
		font-size: @sand-switch-icon-font-size;
		line-height: @sand-switch-icon-line-height;
		margin: 0;
		vertical-align: top;
	}

	&.selected {
		.icon {
			left: (@sand-switch-width - @sand-switch-height);
		}
	}

	&.animated {
		.client {
			transition: background-color 200ms;
		}

		.icon {
			transition: left 200ms, color 200ms;
		}
	}

	// Skin colors
	.applySkins({
		.client {
			background-color: @sand-switch-bg-color;
		}

		.icon {
			background-color: transparent;
			color: @sand-switch-color;
		}

		&.selected {
			.client {
				background-color: @sand-switch-selected-bg-color;
			}

			.icon {
				color: @sand-switch-selected-color;
			}
		}

		.disabled({
			&.selected {
				.client {
					background-color: @sand-switch-disabled-selected-bg-color;
				}

				.icon {
					color: @sand-switch-disabled-selected-color;
				}
			}
		});

		// The switch is acting a standalone capacity and is Spottable
		.spottable({
			.sand-taparea(@sand-switch-height);
			margin: @sand-switch-spottable-margin;

			.bg {
				position: absolute;
				.position(@sand-switch-spottable-position-top-bottom, @sand-switch-spottable-position-left-right);
				border-radius: @sand-switch-spottable-border-radius;
				z-index: -1;
				.sand-spotlight-resting-bg-colors();
			}
		});

		.focus({
			.bg {
				.sand-spotlight-focus-bg-colors();
			}

			.icon {
				color: @sand-switch-focus-color;
			}

			&.selected {
				.icon {
					color: @sand-switch-selected-focus-color;
				}
			}
		});

		.sand-disabled({
			.client {
				.sand-disabled-colors();
			}

			.focus({
				.bg {
					.sand-disabled-focus-bg-colors();
				}
				.client {
					.sand-disabled-focus-content-colors();
				}
			});
		});

	});
}

// Keep the switch handle (the icon) a constant color regardless of focus state.
.applySkins({
	.focus({
		.switch {
			.icon {
				color: @sand-switch-focus-color;
			}

			&.selected {
				.icon {
					color: @sand-switch-selected-focus-color;
				}
			}
		}
	}, parent);
});

.applySkins({
	.disabled({
		.switch {
			&.selected {
				.client {
					background-color: @sand-switch-disabled-selected-bg-color;
				}

				.icon {
					color: @sand-switch-disabled-selected-color;
				}
			}
		}
	});
});
