// Picker.module.less
//
@import "../../styles/variables.less";
@import "../../styles/mixins.less";
@import "../../styles/skin.less";

// Math to calculate the difference in GUI guide spec for the item and the DOM size for the item.
// Divide by 2 to get the difference of just one edge from the corrosponding edge,
// since the two are center aligned vertically.
@_picker-joined-horizontal-vedge-gap: ((@sand-picker-joined-horizontal-height - @sand-picker-joined-horizontal-value-line-height) / 2);

// Determine the height of the item given the font size and relative (em) line height.
@_picker-value-height: (@sand-picker-joined-font-size * @sand-picker-line-height); // 99px
// Math to find the margin-bottom of the item given the height of the item and the
// desired distance from the top.
@sand-picker-joined-horizontal-value-offset: ((
	(48px - @_picker-joined-horizontal-vedge-gap) - // 48px - 15px = 33px
	((@_picker-value-height - 78px) / 2) // (78px - 99px / 2) = 10.5px
)* 2);

// Calculate the offset of the indicators with respect to the bottom of Picker given that the
// item (value wrapper) doesn't sit directly on the bottom edge.
@sand-picker-indicator-bottom: (30px - (@_picker-joined-horizontal-vedge-gap));

.picker {
	vertical-align: bottom;
	position: relative;
	text-align: center;
	margin-left: @sand-spotlight-outset;
	margin-right: @sand-spotlight-outset;

	.sizingPlaceholder,
	.valueWrapper {
		.sand-text-base(@sand-picker-font-size);
		.sand-locale-non-latin({line-height: @sand-button-small-height;});
		max-width: 960px;

		.item {
			&.numeric {
				.sand-font-number();
			}
		}
	}

	.sizingPlaceholder,
	.item {
		padding: 0 @sand-spotlight-outset;
	}

	.sizingPlaceholder {
		height: 0;
		visibility: hidden;
	}

	.valueWrapper {
		margin-left: auto;
		margin-right: auto;
		height: @sand-picker-value-height;
		line-height: @sand-picker-value-height;
		position: relative;
	}

	.viewManager {
		overflow: hidden;
		height: 100%;

		> .item:nth-child(2) {
			// the second element in the ViewManager should be offset by the container width
			// so the transition can position two static views next to each other safely,
			// since transform is not available (to offset by its own width).
			top: -100%;
		}
	}

	.item {
		position: relative;
	}

	.incrementer,
	.decrementer {
		cursor: pointer;
		margin: 0;
		position: relative;
		transition: transform 100ms;

		.disabled({
			cursor: default;
		});
	}

	&.horizontal {
		:global(.enact-locale-right-to-left) & {
			flex-direction: row-reverse;
		}

		.incrementer {
			order: 3;
		}
		.decrementer {
			order: 1;
		}
		.valueWrapper {
			order: 2;
		}
	}

	&.vertical {
		height: @sand-picker-joined-vertical-height;
	}

	&.joined {
		&::before {
			content: "";
			position: absolute;
			.position(0);
		}

		.icon {
			vertical-align: top;
			margin: 0;
			width: @sand-button-small-height;
			height: @sand-button-small-height;
			line-height: @sand-button-small-height;
		}

		.valueWrapper {
			height: @sand-picker-value-height;
		}

		.incrementer,
		.decrementer {
			&.hidden {
				visibility: hidden;
			}
		}

		&.horizontal {
			height: @sand-picker-joined-horizontal-height;
			padding: @sand-picker-joined-horizontal-padding;

			&::before {
				border-radius: @sand-picker-joined-horizontal-border-radius;
			}

			.sizingPlaceholder,
			.valueWrapper {
				font-size: @sand-picker-joined-font-size;
			}

			.valueWrapper {
				// height: @sand-picker-joined-horizontal-value-line-height;
				// line-height: @sand-picker-joined-horizontal-value-line-height;
				height: @sand-picker-line-height;
				line-height: @sand-picker-line-height;
				margin-bottom: @sand-picker-joined-horizontal-value-offset;
			}

			.incrementer,
			.decrementer {
				margin: 0;
				height: @sand-picker-joined-horizontal-height;
				line-height: @sand-picker-joined-horizontal-height;

				.icon {
					visibility: hidden;
				}
			}

			.indicatorContainer {
				margin: 0 auto;
				line-height: 0;
				white-space: nowrap;
				margin-top: 21px; // Math for reconciling GUI Guide line height with our own (1.5em)

				.indicator {
					display: inline-block;
					width: @sand-picker-indicator-width;
					height: @sand-picker-indicator-height;
					margin: @sand-picker-indicator-margin;
					border-radius: @sand-picker-indicator-border-radius;
					transform: scale(@sand-picker-indicator-inactive-scale);
					vertical-align: middle;
					will-change: transform;
					transition: transform @sand-picker-focus-duration ease-out;

					&.active {
						transform: scale(@sand-picker-indicator-active-scale);
					}
				}
			}
		}

		&.vertical {
			&::before {
				border-radius: @sand-picker-joined-vertical-border-radius;
			}

			.incrementer,
			.decrementer {
				visibility: hidden;
			}

			.focus({
				.incrementer,
				.decrementer {
					visibility: visible;
				}
			});
		}
	}

	&.small .valueWrapper {
		width: (@sand-icon-large-size + @sand-spotlight-outset*3);
	}
	&.medium .valueWrapper {
		width: @sand-picker-medium-value-width;
	}
	&.large .valueWrapper {
		width: @sand-picker-large-value-width;
	}

	// Skin colors
	.applySkins({
		color: @sand-picker-text-color;

		&.joined {
			color: @sand-picker-joined-text-color;

			&.horizontal {
				&::before {
					.sand-spotlight-resting-bg-colors(1);
					background-color: @sand-picker-joined-horizontal-bg-color;
				}

				.indicator {
					background-color: @sand-picker-indicators-inactive-bg-color;

					&.active {
						background-color: @sand-picker-indicators-active-bg-color;
					}
				}
			}

			&.vertical {
				&::before {
					.sand-spotlight-resting-bg-colors();
				}
			}

			.focus({
				.sand-spotlight-focus-text-colors();

				&.horizontal {
					&::before {
						.sand-spotlight-focus-bg-colors();
						background-color: @sand-picker-joined-horizontal-bg-color; // We use the resting colors here and augment the color using a filter so it can be animated smoothly
						filter+_: saturate(0) brightness(1.89);
					}
				}

				&.vertical {
					&::before {
						.sand-spotlight-focus-bg-colors();
					}
				}

				.sand-disabled({
					color: @sand-picker-joined-focus-disabled-text-color;

					&::before {
						.sand-disabled-focus-bg-colors();
					}

					.valueWrapper {
						.sand-disabled-focus-content-colors();
					}

					.indicator {
						background-color: @sand-picker-joined-focus-disabled-indicator-bg-color;
						opacity: @sand-picker-joined-focus-disabled-indicator-opacity;

						&.active {
							opacity: @sand-picker-joined-focus-disabled-indicator-active-opacity;
						}
					}
				});

				.indicator {
					background-color: @sand-picker-indicators-inactive-focus-bg-color;

					&.active {
						background-color: @sand-picker-indicators-active-focus-bg-color;
					}
				}
			})
		}
	});

	// Large-text mode rules
	.sand-custom-text({
		.sizingPlaceholder,
		.valueWrapper {
			font-size: @sand-item-font-size-large;
		}
		.valueWrapper {
			line-height: @sand-button-small-height-large;
			height: @sand-button-small-height-large;
		}

		&.joined {
			&.horizontal {
				font-size: @sand-item-font-size-large;
				height: @sand-picker-joined-horizontal-height;
				line-height: @sand-button-small-height-large;

				.incrementer,
				.decrementer {
					&,
					.icon {
						height: @sand-button-small-height-large;
						line-height: @sand-button-small-height-large;
					}
				}
			}
		}

		&.small,
		&.medium,
		&.large {
			&.vertical {
				.valueWrapper {
					.sizingPlaceholder,
					.item {
						margin: 0 @sand-spotlight-outset;
					}
				}
			}
		}

		&.vertical {
			.valueWrapper {
				padding: 0 @sand-spotlight-outset;

				.sizingPlaceholder,
				.item {
					margin: 0;
				}
			}
		}
	});
}

.muted({
	.picker {
		.applySkins({
			&.joined {
				.focus({
					color: @sand-picker-joined-text-color;

					&.horizontal {
						&::before {
							background-color: @sand-picker-joined-horizontal-bg-color;
						}
					}
				});
			}
		});
	}
});
