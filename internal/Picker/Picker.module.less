// Picker.module.less
//
@import "../../styles/variables.less";
@import "../../styles/mixins.less";
@import "../../styles/skin.less";

.picker {
	vertical-align: bottom;
	position: relative;
	text-align: center;
	margin: @sand-picker-margin;

	.sizingPlaceholder,
	.valueWrapper {
		.sand-text-base(@sand-picker-font-size);
		max-width: 960px;

		.item {
			&.numeric {
				.sand-font-number();
			}
		}
	}

	.sizingPlaceholder {
		height: 0;
		visibility: hidden;
		padding-left: .extract(@sand-picker-item-padding, left)[];
		padding-right: .extract(@sand-picker-item-padding, right)[];
		line-height: 0;
	}

	.valueWrapper {
		margin-left: auto;
		margin-right: auto;
		height: @sand-picker-value-height;
		line-height: @sand-picker-value-height;
		position: relative;

		.enact-locale-tallglyph({
			height: @sand-tallglyph-picker-line-height;
			line-height: @sand-tallglyph-picker-line-height;
		});
	}

	.item {
		padding: @sand-picker-item-padding;
	}

	// Special rules for small size for a more compact view
	&.small {
		.sizingPlaceholder,
		.item {
			padding-left: (.extract(@sand-picker-item-padding, left)[] / 2);
			padding-right: (.extract(@sand-picker-item-padding, right)[] / 2);
		}
	}

	.viewManager {
		overflow: hidden;
		height: 100%;

		> .item:nth-child(2) {
			// the second element in the ViewManager should be offset by the container height
			// so the transition can position two relative views next to each other safely.
			top: -100%;
		}
	}

	.item {
		position: relative;
	}

	.incrementer,
	.decrementer {
		cursor: pointer;
		margin: 0;
		position: relative;
		line-height: 1em; // Set the line height to the font size, whatever the font size is.

		.disabled({
			cursor: default;
		});
	}

	&.horizontal {
		.enact-locale-rtl({
			flex-direction: row-reverse;
		});

		.incrementer {
			order: 3;
		}
		.decrementer {
			order: 1;
		}
		.valueWrapper {
			order: 2;
		}
	}

	&.vertical {
		height: @sand-picker-vertical-height;
	}

	&.joined {
		&::before {
			content: "";
			position: absolute;
			.position(0);
		}

		.sizingPlaceholder,
		.valueWrapper {
			font-weight: @sand-picker-joined-font-weight;
		}

		.icon {
			margin: 0;
		}

		&.horizontal:not(.arrow) {
			height: @sand-picker-joined-horizontal-height;
			padding: @sand-picker-joined-horizontal-padding;

			&::before {
				border-radius: @sand-picker-joined-horizontal-border-radius;
			}

			.sizingPlaceholder,
			.valueWrapper {
				font-size: @sand-picker-joined-font-size;
			}

			.valueWrapper {
				height: @sand-picker-joined-value-height;
				line-height: @sand-picker-joined-value-height;
				margin-bottom: @sand-picker-joined-horizontal-value-offset;
			}

			.item {
				// This "fixes" an issue with horizontal+joined+noAnimation which casuses
				// a de-focus to happen on click. Here, we turn off pointer events, so that
				// event can't be fired by item, and he Picker will not become de-focused.
				pointer-events: none;
			}

			.indicatorContainer {
				margin: 0 auto;
				line-height: 0;
				white-space: nowrap;

				.indicator {
					display: inline-block;
					width: @sand-picker-indicator-width;
					height: @sand-picker-indicator-height;
					margin: @sand-picker-indicator-margin;
					border-radius: @sand-picker-indicator-border-radius;
					transform: scale(@sand-picker-indicator-inactive-scale);
					vertical-align: middle;
					will-change: transform;
					transition: transform @sand-picker-focus-duration ease-out;

					&.active {
						transform: scale(@sand-picker-indicator-active-scale);
					}
				}
			}
		}

		&.horizontal.arrow, &.vertical {
			&::before {
				border-radius: @sand-picker-joined-vertical-border-radius;
			}
		}

		&.horizontal.arrow {
			.incrementer,
			.decrementer {
				line-height: (@sand-button-small-height - (2 * @sand-button-border-width));
				height: @sand-button-small-height;
				margin: @sand-button-small-focusexpand-margin;
				padding: @sand-button-icon-small-padding;
			}
		}

		&.vertical {
			.valueWrapper {
				height: @sand-picker-joined-value-height;
				line-height: @sand-picker-joined-value-height;
			}
		}
	}

	&.small .valueWrapper {
		width: @sand-picker-small-value-width;
	}
	&.medium .valueWrapper {
		width: @sand-picker-medium-value-width;
	}
	&.large .valueWrapper {
		width: @sand-picker-large-value-width;
	}

	// Skin colors
	.applySkins({
		color: @sand-picker-text-color;

		&.joined {
			color: @sand-picker-joined-text-color;

			&.horizontal:not(.arrow) {
				color: @sand-picker-joined-horizontal-text-color;

				&::before {
					.sand-spotlight-resting-bg-colors(1);
					background-color: @sand-picker-joined-horizontal-bg-color;
				}

				.indicator {
					background-color: @sand-picker-indicators-inactive-bg-color;

					&.active {
						background-color: @sand-picker-indicators-active-bg-color;
					}
				}
			}

			&.horizontal.arrow, &.vertical {
				&::before {
					.sand-spotlight-resting-bg-colors();
				}

				.incrementer,
				.decrementer {
					color: @sand-picker-joined-incrementer-color;
				}
			}

			.focus({
				:global(.spotlight-input-key)&,
				:global(.spotlight-input-mouse)& {
					.sand-spotlight-focus-text-colors();

					&.horizontal:not(.arrow) {
						&::before {
							.sand-spotlight-focus-bg-colors();
							background-color: @sand-picker-joined-horizontal-bg-color; // We use the resting colors here and augment the color using a filter so it can be animated smoothly
							filter+_: saturate(0) brightness(1.89);
						}
					}

					&.horizontal.arrow, &.vertical {
						&::before {
							.sand-spotlight-focus-bg-colors();
						}

						.incrementer,
						.decrementer {
							color: @sand-picker-joined-focus-incrementer-color;
						}
					}

					.sand-disabled({
						color: @sand-picker-joined-focus-disabled-text-color;

						&::before {
							.sand-disabled-focus-bg-colors();
						}

						.valueWrapper {
							.sand-disabled-focus-content-colors();
						}

						.indicator {
							background-color: @sand-picker-joined-focus-disabled-indicator-bg-color;
							opacity: @sand-picker-joined-focus-disabled-indicator-opacity;

							&.active {
								opacity: @sand-picker-joined-focus-disabled-indicator-active-opacity;
							}
						}
					});

					.indicator {
						background-color: @sand-picker-indicators-inactive-focus-bg-color;

						&.active {
							background-color: @sand-picker-indicators-active-focus-bg-color;
						}
					}
				}
			})
		}
	});
}
